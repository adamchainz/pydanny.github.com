<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pydanny</title><link href="http://pydanny.com" rel="alternate"></link><link href="http://pydanny.com/feeds/all.atom.xml" rel="self"></link><id>http://pydanny.com</id><updated>2013-01-17T10:00:00Z</updated><entry><title>Our Django Book has Launched</title><link href="http://pydanny.com/our-django-book-is-launched.html" rel="alternate"></link><updated>2013-01-17T10:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/our-django-book-is-launched.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://django.2scoops.org/"&gt;&lt;img alt="https://s3.amazonaws.com/twoscoops/img/tsd-cover.png" class="align-center" id="two-scoops-of-django-best-practices-for-django-1-5" src="https://s3.amazonaws.com/twoscoops/img/tsd-cover.png" /&gt;&lt;/a&gt;
&lt;p&gt;We (&lt;a class="reference external" href="http://audreymroy.com"&gt;Audrey Roy&lt;/a&gt; and I) wrote a &lt;a class="reference external" href="http://django.2scoops.org"&gt;book&lt;/a&gt; on Django! It's called &lt;strong&gt;Two Scoops of Django: Best Practices for Django 1.5&lt;/strong&gt;, and you can buy it right now in e-book (PDF) form on the website: &lt;a class="reference external" href="http://django.2scoops.org"&gt;http://django.2scoops.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Django, like any framework, has tips, tricks, and pitfalls that aren't documented in one place. Experienced developers know this stuff, but gleaning it off the Internet takes a lot of time. We decided to take everything we know and write it down. This &lt;a class="reference external" href="http://django.2scoops.org"&gt;book&lt;/a&gt; reflects a portion of what we documented, and if it does well we plan to follow it up with other references.&lt;/p&gt;
&lt;p&gt;If you've followed this blog or watched our talks you've know we've explained tons of Django and Python related examples. We enjoy using Django and Python to build stable, fast web applications quickly and efficiently. We've also worked  This is the &lt;a class="reference external" href="http://django.2scoops.org"&gt;book&lt;/a&gt; we would have wanted while learning the intricacies of our tools, and then kept it handy for reference.&lt;/p&gt;
&lt;p&gt;In the &lt;a class="reference external" href="http://django.2scoops.org"&gt;book&lt;/a&gt; we cover everything from customizing the Django 1.5 User model, forms,  views, templates, security, bottleneck analysis and so much more. We tie in third-party packages from the Django and Python community. We discuss the positive patterns that allow for rapid development, and point out the anti-patterns that cause problems.
The result isn't a walk-through or tutorial, but a reference guide for anyone with at least a basic understanding of Django.&lt;/p&gt;
&lt;p&gt;We tried to make the code copy/pastable, but we are constrained by the limits of PDF. While the code examples display nicely, &lt;em&gt;when pasting from Adobe Reader the leading white spaces vanish&lt;/em&gt;. We apologize and ask if anyone knows how to address this issue to let us know at &lt;a class="reference external" href="mailto:2scoops&amp;#64;cartwheelweb.com"&gt;2scoops&amp;#64;cartwheelweb.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Even with an amazing cadre of technical reviewers, there is always the possibility of errors. We are going to be actively maintaining the &lt;a class="reference external" href="http://django.2scoops.org"&gt;book&lt;/a&gt;, so if you find a mistake, let us know and we'll update it and send out an updated copy of the PDF to all buyers.&lt;/p&gt;
&lt;p&gt;If you'd like to buy the book (or learn more about it), you can do so here: &lt;a class="reference external" href="http://django.2scoops.org"&gt;http://django.2scoops.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="twoscoops"></category><category term="resolutions"></category><category term="python"></category><category term="django"></category><category term="audrey"></category><category term="django-CBVs"></category><category term="heroku"></category><category term="dotcloud"></category><category term="gondor"></category></entry><entry><title>New Year's Resolutions for 2013</title><link href="http://pydanny.com/new-years-resolutions-for-2013.html" rel="alternate"></link><updated>2012-12-31T10:45:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/new-years-resolutions-for-2013.html</id><summary type="html">&lt;p&gt;I'm one of those people who not only likes to make New Year's Resolutions, I like to blog about them.&lt;/p&gt;
&lt;div class="section" id="resolution"&gt;
&lt;h2&gt;Resolution&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Go to at least one technical conference in North America, South America, Europe, Asia,  Africa, and Australia.&lt;/li&gt;
&lt;li&gt;Visit at least one new nation. It's hard to come up with preferences since the whole world is so exciting.&lt;/li&gt;
&lt;li&gt;Go back to at least one of the nations I've visited before.&lt;/li&gt;
&lt;li&gt;Take a road trip across the USA.&lt;/li&gt;
&lt;li&gt;See the Grand Canyon.&lt;/li&gt;
&lt;li&gt;Keep to a 32 waist for the whole year.&lt;/li&gt;
&lt;li&gt;Visit friends and family back east.&lt;/li&gt;
&lt;li&gt;Blog once a week. That is at least 52 blog entries!&lt;/li&gt;
&lt;li&gt;Visit the beach for more than one day.&lt;/li&gt;
&lt;li&gt;Take a fun class with Audrey.&lt;/li&gt;
&lt;li&gt;Teach some Python or Django.&lt;/li&gt;
&lt;li&gt;Build something real using Twisted as a critical component.&lt;/li&gt;
&lt;li&gt;Take a high level Python class from the likes of Raymond Hettinger or David Beazley.&lt;/li&gt;
&lt;li&gt;Commit to core Python&lt;/li&gt;
&lt;li&gt;Visit my Son.&lt;/li&gt;
&lt;li&gt;Upload all my outstanding pictures to Flickr!&lt;/li&gt;
&lt;li&gt;Pull off an Aú sem Mão (no-handed cartwheel).&lt;/li&gt;
&lt;li&gt;Attend my first Capoeira Batizado (formal gathering).&lt;/li&gt;
&lt;li&gt;Work out at least three times a week.&lt;/li&gt;
&lt;li&gt;Learn how to surf or snowboard.&lt;/li&gt;
&lt;li&gt;Have a beer with Thomas, Andy, Andy, Tony, Garrick, Bernd, and the rest of Ye Aulde Gange.&lt;/li&gt;
&lt;li&gt;See my old DC area friends such as Eric, Chris, Steve, Beth, Sarah, Daye, Renee, Kenneth, Leslie, Whitney, Dave, and many others.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Post NYE Addendum:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Update my blog to Pelican 3.&lt;/li&gt;
&lt;li&gt;Implement a custom theme design so my blog looks more unique. ;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="accomplished"&gt;
&lt;h2&gt;Accomplished&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Publish as least one book. See &lt;a class="reference external" href="http://django.2scoops.org/"&gt;Two Scoops of Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="holidays"></category><category term="resolutions"></category><category term="python"></category><category term="capoeira"></category><category term="family"></category><category term="friends"></category><category term="django"></category></entry><entry><title>2012 resolution summary</title><link href="http://pydanny.com/2012-resolution-summary.html" rel="alternate"></link><updated>2012-12-30T10:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/2012-resolution-summary.html</id><summary type="html">&lt;div class="section" id="resolutions-completed"&gt;
&lt;h2&gt;Resolutions completed&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Go to a Python related conference in North America, Europe, and Asia. Conferences I attended:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PyCon US&lt;/li&gt;
&lt;li&gt;DjangoCon Europe&lt;/li&gt;
&lt;li&gt;PyCon Philippines&lt;/li&gt;
&lt;li&gt;PyCon Poland&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;See a place in the USA I've never been. A couple places I saw:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/San_Luis_Obispo"&gt;San Luis Obispo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Sonoma_County,_California"&gt;Sonoma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Drop to a 32 waist&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Visit friends and family back east. Been over a year since I've seen my sister!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Blog once a week. That is at least 52 blog entries! Details:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;48 entries on this blog.&lt;/li&gt;
&lt;li&gt;12 entries on my &lt;a class="reference external" href="http://pydanny.blogspot.com/search?updated-min=2012-01-01T00:00:00-08:00&amp;amp;updated-max=2013-01-01T00:00:00-08:00&amp;amp;max-results=12"&gt;old blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;60 entries total!&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Visit a Theme park. The parks I got to visit:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Disneyland"&gt;Disneyland&lt;/a&gt; (Thanks Paul and Marty!)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Disney_California_Adventure"&gt;Disney California Adventure&lt;/a&gt; (More thanks to Paul and Marty!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Implement something in node.js, backbone.js, and handlebars.js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Teach some Python or Django.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Visit my Son.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="resolution-failure"&gt;
&lt;h2&gt;Resolution Failure&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Go to a Python related conference in South America, Africa, Australia, and New Zealand.&lt;/li&gt;
&lt;li&gt;Attend at least one JavaScript related conference or event.&lt;/li&gt;
&lt;li&gt;Upload all my outstanding pictures to Flickr!&lt;/li&gt;
&lt;li&gt;Make Consumer Notebook profitable.&lt;/li&gt;
&lt;li&gt;Pull off an Aú sem Mão during a Capoeira Roda.&lt;/li&gt;
&lt;li&gt;Attend my first Capoeira Batizado.&lt;/li&gt;
&lt;li&gt;Work out at least three times a week.&lt;/li&gt;
&lt;li&gt;Learn how to surf or snowboard.&lt;/li&gt;
&lt;li&gt;Take a high level Python class from the likes of Raymond Hettiger or David Beazly.&lt;/li&gt;
&lt;li&gt;Have a beer with Thomas, Andy, Andy, Tony, Garrick, Bernd, and the rest of Ye Aulde Gange.&lt;/li&gt;
&lt;li&gt;See my old DC area friends such as Eric, Chris, Steve, Beth, Sarah, Daye, Renee, Kenneth, Leslie, Whitney, Dave, and many others.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="holidays"></category><category term="resolutions"></category><category term="python"></category><category term="capoeira"></category><category term="family"></category><category term="friends"></category></entry><entry><title>New Year's Python Meme 2012</title><link href="http://pydanny.com/new-years-python-meme-2012.html" rel="alternate"></link><updated>2012-12-28T18:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/new-years-python-meme-2012.html</id><summary type="html">&lt;p&gt;Tarek Ziade has a habit of ending the year with a Python-themed meme. I've matched his meme the times he previousstarted it, and as you can tell from the title of this blog post I'm matching him yet again.&lt;/p&gt;
&lt;div class="section" id="whats-the-coolest-python-application-framework-or-library-you-have-discovered-in-2012"&gt;
&lt;h2&gt;1. What’s the coolest Python application, framework or library you have discovered in 2012?&lt;/h2&gt;
&lt;p&gt;This question took some thought. It was a toss-up between these three choices:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django Class Based Views (CBVs) allow developers do amazing things with Django, but needed some polish (&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.5/topics/class-based-views/"&gt;improved documentation&lt;/a&gt;, &lt;a class="reference external" href="http://django-braces.readthedocs.org/"&gt;missing functionality&lt;/a&gt;) to be able to shine.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://reportlab.org"&gt;ReportLab&lt;/a&gt; for generating PDF allowed me to create some &lt;a class="reference external" href="http://www.petcheatsheets.com/"&gt;impressive results&lt;/a&gt;, but the API needed updating. The other Python PDF libraries might be better, but getting images to work trivially in them&lt;/li&gt;
&lt;li&gt;If I didn't completely agree with &lt;a class="reference external" href="http://lucumr.pocoo.org/2012/12/29/sql-is-agile/"&gt;Armin Ronacher on the subject&lt;/a&gt;, I might have gone with a combination of &lt;a class="reference external" href="http://api.mongodb.org/python/"&gt;PyMongo&lt;/a&gt;, &lt;a class="reference external" href="http://mongoengine.org/"&gt;MongoEngine&lt;/a&gt;, and &lt;a class="reference external" href="http://namlook.github.com/mongokit/"&gt;MongoKit&lt;/a&gt;. Just like Armin, I've learned through working with schemaless databases to know that schemas are awesome.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The winner?&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Django Class Based Views&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;In 2012 what I managed to accomplish with Django CBVs was incredible. From early self-instructional work I did for &lt;a class="reference external" href="https://github.com/pydanny/django-mongonaut/blob/master/mongonaut/views.py"&gt;django-mongonaut&lt;/a&gt;, to client efforts and personal projects where I honed my craft, plus examples &lt;a class="reference external" href="http://pydanny.com/tag/django-CBVs.html"&gt;I blogged about&lt;/a&gt; or helped get into Django core, it made for a great year. Also I wasn't just productive personally, I helped increased the productivity of others around the world.&lt;/p&gt;
&lt;p&gt;And you ain't seen nothing yet!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-new-programming-technique-did-you-learn-in-2012"&gt;
&lt;h2&gt;2. What new programming technique did you learn in 2012?&lt;/h2&gt;
&lt;p&gt;I thought I understood multiple inheritance.&lt;/p&gt;
&lt;p&gt;I really did.&lt;/p&gt;
&lt;p&gt;However, since the start of this year I've delved really deep into it, only to discover just how much I didn't know. While that didn't do my ego any favors, it was a nice refreshing reminder not to get arrogant about one's skills.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="which-open-source-project-did-you-contribute-to-the-most-in-2012-what-did-you-do"&gt;
&lt;h2&gt;3. Which open source project did you contribute to the most in 2012? What did you do?&lt;/h2&gt;
&lt;p&gt;The answer to this is &lt;strong&gt;Django&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After using Django professionally for 2.5 years, I finally began contributing to the core framework at the DjangoCon Eu 2012 sprints. I joined a group of other dedicated people who decided to improve the &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.5/topics/class-based-views/"&gt;Django CBV documentation&lt;/a&gt;, our goal being setting a new standard for documentation. I'm not sure if we set a new bar in documentation, but we did improve on the existing material.&lt;/p&gt;
&lt;p&gt;I branched out into some other areas of core Django development with mixed results, which played out that way because I just didn't have the time to do more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="which-python-blog-or-website-did-you-read-the-most-in-2012"&gt;
&lt;h2&gt;4. Which Python blog or website did you read the most in 2012?&lt;/h2&gt;
&lt;p&gt;As always, &lt;a class="reference external" href="http://planet.python.org"&gt;http://planet.python.org&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-the-three-top-things-you-want-to-learn-in-2013"&gt;
&lt;h2&gt;5. What are the three top things you want to learn in 2013?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Really advanced Python as taught by Raymond Hettiger or David Beazley.&lt;/li&gt;
&lt;li&gt;I really want to learn &lt;a class="reference external" href="http://twistedmatrix.com/"&gt;Twisted&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;How to do an &lt;a class="reference external" href="http://en.wikipedia.org/wiki/A%C3%BA#A.C3.BA"&gt;Aú sem Mão&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-the-top-software-application-or-library-you-wish-someone-would-write-in-2013"&gt;
&lt;h2&gt;6. What is the top software, application or library you wish someone would write in 2013?&lt;/h2&gt;
&lt;p&gt;I've got a couple:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A Python SDK that produces results that work perfectly for both modern iOS and Android. Think Corona SDK but with Python.&lt;/li&gt;
&lt;li&gt;A modern PyGame release that installs trivially on Mac OS X.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-do-your-own-list-here-s-how"&gt;
&lt;h2&gt;Want to do your own list? here's how:&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;copy-paste the questions and answer to them in your blog&lt;/li&gt;
&lt;li&gt;tweet it with the &lt;a class="reference external" href="https://twitter.com/search/realtime?q=%232012pythonmeme&amp;amp;src=typd"&gt;#2012pythonmeme&lt;/a&gt; hashtag&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="meme"></category><category term="python"></category><category term="django"></category><category term="holidays"></category></entry><entry><title>Result of our LA Migration Hackathon submission</title><link href="http://pydanny.com/result-of-our-la-migration-hackathon-submission.html" rel="alternate"></link><updated>2012-12-09T15:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/result-of-our-la-migration-hackathon-submission.html</id><summary type="html">&lt;div class="section" id="possible-causes-of-for-internal-migration-of-undocumented-people"&gt;
&lt;h2&gt;Possible Causes of for Internal Migration of Undocumented People&lt;/h2&gt;
&lt;p&gt;Our concept was to measure the effect of changing immigrant laws per state compared to income differences between regions. We present the following, which will be on it's own hosted site shortly:&lt;/p&gt;
&lt;div class="section" id="median-income-over-5-years-between-states"&gt;
&lt;h3&gt;Median Income over 5 years between States&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We will convert this chart to percentages this week. For now it is in (median income / 500).&lt;/p&gt;
&lt;iframe width="760" height="760" scrolling="no" frameborder="no" src="https://www.google.com/fusiontables/embedviz?viz=MAP&amp;amp;q=select+col0%3E%3E1+from+1Bl8lPwB3pVDbXlaS902K8yl_QNarQ2ogwXUaShA&amp;amp;h=false&amp;amp;lat=39.39259824852082&amp;amp;lng=-93.5076772155&amp;amp;z=4&amp;amp;t=1&amp;amp;l=col0%3E%3E1&amp;amp;y=2&amp;amp;tmplt=2"&gt;&lt;/iframe&gt;&lt;p&gt;&lt;strong&gt;Embed:&lt;/strong&gt;&lt;/p&gt;
&lt;textarea cols="100" rows="3"&gt;&lt;iframe width="500" height="500" scrolling="no" frameborder="no" src="https://www.google.com/fusiontables/embedviz?viz=MAP&amp;amp;q=select+col0%3E%3E1+from+1Bl8lPwB3pVDbXlaS902K8yl_QNarQ2ogwXUaShA&amp;amp;h=false&amp;amp;lat=39.39259824852082&amp;amp;lng=-93.5076772155&amp;amp;z=4&amp;amp;t=1&amp;amp;l=col0%3E%3E1&amp;amp;y=2&amp;amp;tmplt=2"&gt;&lt;/iframe&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;div class="section" id="undocumented-immigrants-by-state-per-year"&gt;
&lt;h3&gt;Undocumented immigrants by state per year&lt;/h3&gt;
&lt;iframe width="760" height="760" scrolling="no" frameborder="no" src="https://www.google.com/fusiontables/embedviz?viz=MAP&amp;amp;q=select+col0%3E%3E1+from+1b96_5ZHL9DT0JcKVTBY5vbBbB_yMQ2B7Z8Cclog&amp;amp;h=false&amp;amp;lat=38.94970122997403&amp;amp;lng=-97.59459127800005&amp;amp;z=4&amp;amp;t=1&amp;amp;l=col0%3E%3E1&amp;amp;y=2&amp;amp;tmplt=2"&gt;&lt;/iframe&gt;&lt;p&gt;&lt;strong&gt;Embed:&lt;/strong&gt;&lt;/p&gt;
&lt;textarea cols="100" rows="3"&gt;&lt;iframe width="500" height="500" scrolling="no" frameborder="no" src="https://www.google.com/fusiontables/embedviz?viz=MAP&amp;amp;q=select+col0%3E%3E1+from+1b96_5ZHL9DT0JcKVTBY5vbBbB_yMQ2B7Z8Cclog&amp;amp;h=false&amp;amp;lat=38.94970122997403&amp;amp;lng=-97.59459127800005&amp;amp;z=4&amp;amp;t=1&amp;amp;l=col0%3E%3E1&amp;amp;y=2&amp;amp;tmplt=2"&gt;&lt;/iframe&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;div class="section" id="deportation-numbers-per-state"&gt;
&lt;h3&gt;Deportation Numbers per State&lt;/h3&gt;
&lt;iframe width="760" height="760" scrolling="no" frameborder="no" src="https://www.google.com/fusiontables/embedviz?viz=MAP&amp;q=select+col0%3E%3E1+from+1jAhJfABP602AwQ4UcxWBf4E4NFP7Pvr3XzYhiTM&amp;h=false&amp;lat=39.39259824852082&amp;amp;lng=-93.5076772155&amp;z=4&amp;t=1&amp;l=col0%3E%3E1&amp;y=2&amp;tmplt=2"&gt;&lt;/iframe&gt;&lt;p&gt;&lt;strong&gt;Embed:&lt;/strong&gt;&lt;/p&gt;
&lt;textarea cols="100" rows="3"&gt;&lt;iframe width="500" height="500" scrolling="no" frameborder="no" src="https://www.google.com/fusiontables/embedviz?viz=MAP&amp;q=select+col0%3E%3E1+from+1jAhJfABP602AwQ4UcxWBf4E4NFP7Pvr3XzYhiTM&amp;h=false&amp;lat=39.39259824852082&amp;amp;lng=-93.5076772155&amp;z=4&amp;t=1&amp;l=col0%3E%3E1&amp;y=2&amp;tmplt=2"&gt;&lt;/iframe&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="credits"&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sblatino.com"&gt;Carlos Hernandez&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://twitter.com/restabro"&gt;Rachel Estabrook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://twitter.com/connectacopia"&gt;Scott Smith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://latinocalifornia.com"&gt;Agustin Duran&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pydanny.com"&gt;Daniel Greenfeld&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For &lt;a class="reference external" href="http://hackathon2012.wikidot.com/"&gt;LA Hackathon on Immigration&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="hackathon"></category><category term="lahackthons"></category><category term="Los Angeles"></category></entry><entry><title>Developer Time</title><link href="http://pydanny.com/developer-time.html" rel="alternate"></link><updated>2012-12-04T12:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/developer-time.html</id><summary type="html">&lt;p&gt;This blog post got started with a tweet.&lt;/p&gt;
&lt;p&gt;That tweet got retweeted a lot by developers. And system administrators. And database administrators. And any creative type.&lt;/p&gt;
&lt;p&gt;As of December 7th, 2012, it had been retweeted over 500 times, a personal best. Obviously I struck a chord that resonated with a lot of people.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Developers should have 4-6 hours of uninterrupted activity each day. Each 3-5 minute interruption costs more than you can imagine.&lt;/p&gt;&amp;mdash; Daniel Greenfeld (@pydanny) &lt;a href="https://twitter.com/pydanny/status/275680738773463040" data-datetime="2012-12-03T19:19:44+00:00"&gt;December 3, 2012&lt;/a&gt;&lt;/blockquote&gt;
&lt;script src="http://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;div class="section" id="why-did-this-tweet-resonate-with-so-many-people"&gt;
&lt;h2&gt;Why did this tweet resonate with so many people?&lt;/h2&gt;
&lt;p&gt;What I said in that tweet was not new - dozens if not hundreds of others have tweeted similar thoughts before and gotten many retweets. Heck, it's been written about in blogs and articles for years, either as a huge rant or often as an effort to politely educate others on how to set up a developer/operations/creative shop.&lt;/p&gt;
&lt;p&gt;I think this is because developers/engineers/creatives (and good managers) know that even a tiny distraction to someone &amp;quot;in the zone&amp;quot; takes more than just the 3-5 minutes it takes for you to finish a question and get an answer. Plus, because you are trying to remember the pieces in your head, you won't be able to give this issue your full attention. Which causes a whole other set of issues.&lt;/p&gt;
&lt;p&gt;We know this. Good managers know this. Good companies live off of it.&lt;/p&gt;
&lt;p&gt;And yet this remains a huge problem for many of us because the distractions keep happening. Maybe it's because your manager doesn't understand this issue, or you have a team mate who can switch in-and-out of the zone with impunity. Or because you foolishly leave the chat/IRC/phone on and you get pinged.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-we-fix-it"&gt;
&lt;h2&gt;How do we fix it?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;We can't.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I know this sounds depressing, but I'm being realistic. Here's some reasons that apply:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unless you are fortunate enough to be working on a solo effort, you are working with other developers/engineers/creatives. And if they can't ask you questions or inform you about critical stuff then you or they can waste hours.&lt;/li&gt;
&lt;li&gt;Meetings, short or long, online or in person, are a necessary part of any operation. If not with your boss or underlings, then with clients or users.&lt;/li&gt;
&lt;li&gt;Your boss/co-workers/underlings/kids/pets/parents don't get it that you can't be interrupted.&lt;/li&gt;
&lt;li&gt;As a freelancer, you can't be inaccessible to existing or potential clients.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="no-really-how-do-we-fix-it"&gt;
&lt;h2&gt;No really, how do we fix it?&lt;/h2&gt;
&lt;p&gt;Doesn't matter how frequently you ask the the question (or rant about it), I don't believe this problem can be really solved. However, here are some possible mitigations:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Maker's Day&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My friend, &lt;a class="reference external" href="http://craigkerstiens.com/2011/11/07/how-heroku-works-maker-day/"&gt;Craig Kerstiens&lt;/a&gt; describes how &lt;a class="reference external" href="http://heroku.com"&gt;Heroku&lt;/a&gt; gives engineers a full day each week (Thursday) to focus on getting stuff done. No meetings, no standup, just 100% uninterrupted quiet time to focus on making stuff.&lt;/p&gt;
&lt;p&gt;Suggest this at your company and see how it goes!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Blocks of Time&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As of 2010, &lt;a class="reference external" href="http://eldarion.com"&gt;Eldarion&lt;/a&gt; broke up their work day into at least two sizable chunks of uninterrupted activity. Between the chunks you communicated with co-workers. The advantage of this approach is if you went down the wrong path or someone had a critical question, the period between chunks addressed this issue.&lt;/p&gt;
&lt;p&gt;In theory this is how a lot of places work (lunch being the break). The reality is that the distractions often still pile in. For Eldarion it worked because everyone was remote.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. New Desk Location&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If working at an office, asked to be moved to a place with less foot traffic. The downside to this is you can end up in noisy, cold, dark places.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. New Job&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Switch to a new job that promises less distractions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="maybe-i-m-wrong"&gt;
&lt;h2&gt;Maybe I'm wrong&lt;/h2&gt;
&lt;p&gt;I'm more than happy to be proven wrong.&lt;/p&gt;
&lt;p&gt;Maybe there is a way to get 4-6 hours a day of uninterrupted maker's time every work day.&lt;/p&gt;
&lt;p&gt;If you've got any ideas, let me know!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="rant"></category><category term="blog"></category></entry><entry><title>Stay with the Django CBV defaults!</title><link href="http://pydanny.com/stay-with-the-django-cbv-defaults.html" rel="alternate"></link><updated>2012-11-27T16:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/stay-with-the-django-cbv-defaults.html</id><summary type="html">&lt;p&gt;One virtue of Django Class Based Views (CBVs) is that they come with pretty good default settings. The virtue of this is you can really pare your code down in size and complexity.&lt;/p&gt;
&lt;p&gt;For example, here is an implementation of CBVs based on a straight-forward Django model , &lt;tt class="docutils literal"&gt;stuffage.models.Stuff&lt;/tt&gt;, that has a &lt;tt class="docutils literal"&gt;get_absolute_url&lt;/tt&gt; method:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stuffage/views.py&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;generic&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;stuffage.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Stuff&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StuffDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stuff&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StuffListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stuff&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StuffCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stuff&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StuffUpdateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stuff&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;stuffage/urls.py&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.defaults&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;stuffage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;quot;^create/$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffCreateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuff_create&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;quot;^update/(?P&amp;lt;pk&amp;gt;\d+)/$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffUpdateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuff_update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;quot;^(?P&amp;lt;pk&amp;gt;\d+)/$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffDetailView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuff_detail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;quot;^$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuff_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These four CBVs will default to the following three templates without any action on my part:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
stuffage/stuff_detail.html (StuffDetailView)
stuffage/stuff_form.html (StuffCreateView, StuffUpdateView)
stuffage/stuff_list.html (StuffListView)
&lt;/pre&gt;
&lt;p&gt;So easy I use a simple script to render all this code!&lt;/p&gt;
&lt;div class="section" id="what-about-doing-this-all-in-the-urls-py"&gt;
&lt;h2&gt;What about doing this all in the urls.py?&lt;/h2&gt;
&lt;p&gt;Yes, I could do this all in the &lt;cite&gt;urls.py&lt;/cite&gt;, but real Django code involves doing some logic in views, no matter how skinny you try to make said views. While I'm a huge proponent of logic in fat models, invariably I'm adding to the view context, or doing something else that requires tweaking of CBV settings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;One trait of developers is we like to &lt;strong&gt;tinker&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, I keep seeing developers tinkering on the settings for Django CBVs without any reason besides tinkeringWhich means you get things like:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;unfortunately tinkered stuffage/views.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 1. Using template_name means extra code and extra developer lookup time.&lt;/span&gt;
&lt;span class="c"&gt;# 2. Changing the context_object_name means extra code  and extra developer&lt;/span&gt;
&lt;span class="c"&gt;#       lookup time.&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StuffDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stuff&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;stuffage/stuffs.html&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;context_object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;stuff&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;unfortunately tinkered stuffage/urls.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 1. Logic into your URLConf should be kept to a minimum&lt;/span&gt;
&lt;span class="c"&gt;# 2. Unless you are using the same view more than once, specifying the&lt;/span&gt;
&lt;span class="c"&gt;#       template_name here is a waste of code. And makes it harder to&lt;/span&gt;
&lt;span class="c"&gt;#       understand the view.&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;quot;^$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuffage/stuffs.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuff_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="c"&gt;# No matter how fat your models get, you always end up extending all views,&lt;/span&gt;
&lt;span class="c"&gt;#   so this will have to be moved into the formal views.py at some point. So&lt;/span&gt;
&lt;span class="c"&gt;#   why not start with it in the views.py in the first place.&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;quot;^$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Stuff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuffage/stuffs.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuff_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't forget you can also tinker/tweak formats and slug/pk identifier defaults, and a ton of other things that are part of Django CBVs. While this gives you great power, if misused that power can cause grief in terms of code obfuscation and the need for additional testing.&lt;/p&gt;
&lt;p&gt;My opinion is that these defaults were meant as a standard for the CBV to operate, upon which developers familiar with the Django CBV API could extend and expand their code for minimal effort. Yes, you can tweak them to match your preferred patterns, but that's extra work. Work you shouldn't be doing if you can avoid it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-advice"&gt;
&lt;h2&gt;My Advice&lt;/h2&gt;
&lt;p&gt;Stick with the defaults and only modify behavior that actually needs to be modified. For example, if you want to show multiple versions of a ListView you might do something like:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stuffage/urls.py with a pydanny approved use of template_name&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;quot;^$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuff_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="c"&gt;# Same view but with a template designed to show larger list items.&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;quot;^large/$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StuffListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuffage/stuff_list_large.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stuff_list_large&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This is the pattern I follow when I build projects. I stick to the framework standard as much as possible. Since many systems rely on convention over configuration, this makes it easier and faster to develop projects, be it Django, Twisted, or some other tool.&lt;/p&gt;
&lt;p&gt;It's the work you can see in my &lt;a class="reference external" href="http://petcheatsheets.com"&gt;recent&lt;/a&gt; &lt;a class="reference external" href="http://movehero.io"&gt;public&lt;/a&gt; &lt;a class="reference external" href="http://lacurrents.com"&gt;projects&lt;/a&gt;, and what I want to port to long existing sites like &lt;a class="reference external" href="http://djangopackages.com"&gt;Django Packages&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="rant"></category><category term="django"></category><category term="python"></category><category term="howto"></category><category term="django-CBVs"></category></entry><entry><title>Thoughts on ranting</title><link href="http://pydanny.com/thoughts-on-ranting.html" rel="alternate"></link><updated>2012-11-26T16:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/thoughts-on-ranting.html</id><summary type="html">&lt;p&gt;I'll admit it, I love a good rant. I respect those who can give rants well. I would list the ones I really like, but I'm not sure I want to deal with the arguments that would follow. ;-)&lt;/p&gt;
&lt;p&gt;Of course, as much as I like to read or listen to them, I also like to give them. As of 11/26/2012 there are 2 on this &lt;a class="reference external" href="http://pydanny.com/tag/rant.html"&gt;blog&lt;/a&gt; and 26 on my &lt;a class="reference external" href="http://pydanny.blogspot.com/search/label/rant"&gt;old blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, I have a problem in giving rants. It ties with this unfortunate trait I possess where if I let myself get angry I say things that destroy relationships. No, I'm not giving examples, but there you are.&lt;/p&gt;
&lt;p&gt;So when I do rant, I try to never do so in anger. Especially when it's the written word. Instead, I try to do so under one of the following conditions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I need to be a whimsical mood.&lt;/li&gt;
&lt;li&gt;OR I need to be willing to submit a solution.&lt;/li&gt;
&lt;li&gt;OR I need to be willing to accept a solution, even if it means work.&lt;/li&gt;
&lt;li&gt;OR I need to be willing to create a solution.&lt;/li&gt;
&lt;li&gt;OR the object of the rant must be an easy target to flame.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="blog"></category><category term="rant"></category><category term="family"></category><category term="friends"></category></entry><entry><title>Case Study: URL Design for petcheatsheets.com</title><link href="http://pydanny.com/case-study-url-design-for-petcheatsheetscom.html" rel="alternate"></link><updated>2012-11-21T22:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/case-study-url-design-for-petcheatsheetscom.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Backstory:&lt;/strong&gt; On Saturday, November 17, 2012 &lt;a class="reference external" href="http://audreymroy.com"&gt;Audrey Roy&lt;/a&gt; and I decided to participate in the &lt;a class="reference external" href="https://twitter.com/petcentric"&gt;Petcentric&lt;/a&gt; hackathon, a Los Angeles area Pet-themed product/coding contest held at &lt;a class="reference external" href="http://www.amplify.la/"&gt;Amplify&lt;/a&gt;. We arrived a bit late, but armed with Audrey's idea of creating a pet based reference sheet for owners, pet sitters, vets, and anyone else needing a card with data on pets, we got to work. About eight hours later we toggled a DNS switch and &lt;a class="reference external" href="https://www.petcheatsheets.com"&gt;petcheatsheets.com&lt;/a&gt; was live.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Pet Cheatsheet's owner's pet information is private, because it includes emergency contact information that often includes phone numbers, email addresses, and even physical addresses of family members and friends. Maintaining the privacy of pets and their owners was also a consideration in implementation.&lt;/p&gt;
&lt;div class="section" id="url-design-thoughts"&gt;
&lt;h2&gt;URL Design Thoughts&lt;/h2&gt;
&lt;p&gt;During development, one of the things I considered carefully was URL design of the primary feature, which was pets. The obvious choice was to go with a design that identified owners with pets:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/&amp;lt;owner_username&amp;gt;/&amp;lt;pet_name&amp;gt;/
&lt;/pre&gt;
&lt;p&gt;However, upon reflection, this didn't sit well with me. What if a pet changed owners? Identifying a pet with a particular owner in the URL meant that if we ever added a 'transfer ownership' feature, there would be extra work. Also, if we ever implemented a sharing feature, changing URLs on a pet going to the same veterinarian their whole life might make the veterinarian's list of pets and their URLs invalid.&lt;/p&gt;
&lt;p&gt;With that in mind, I decided to go with an identifier and pet name, where the pet name was actually not used in the lookup:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/&amp;lt;pet_id&amp;gt;/&amp;lt;pet_name:not_required&amp;gt;/
&lt;/pre&gt;
&lt;p&gt;One more thing, rather than just use the &lt;strong&gt;pet&lt;/strong&gt; table's primary key as &lt;tt class="docutils literal"&gt;&amp;lt;pet_id&amp;gt;&lt;/tt&gt; I decided to go with base36 (0-9 and a-z) encoding. It's not unlike what URL shortening services do, and if we gained any traction, it makes recitation of a pet's URL easier. So the final result was actually:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/&amp;lt;pet_id:base_36_encoded&amp;gt;/&amp;lt;pet_name:not_required&amp;gt;/
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation"&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Here's a simplified view of the final implementation, starting with the model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# pets/models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ugettext_lazy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Pet&amp;#39;s name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;identifier&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# More fields...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# pets/forms.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pets.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PetForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# more fields&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With model and form, we build the views:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# pets/views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.baseconv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;base36&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;braces.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pets.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PetForm&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PetCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;
    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PetForm&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base36&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
        &lt;span class="c"&gt;# Save again - it&amp;#39;s not taking THAT many server cycles AND we needed&lt;/span&gt;
        &lt;span class="c"&gt;#    the pet.pk in advance to generate the pet.identifier&lt;/span&gt;
        &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PetCreateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GetPetMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Any view that needs to get a Pet object can use this Mixin&lt;/span&gt;

&lt;span class="sd"&gt;        Pet Cheatsheet&amp;#39;s owner&amp;#39;s pet information is private, because it&lt;/span&gt;
&lt;span class="sd"&gt;            includes emergency contact information that often includes phone&lt;/span&gt;
&lt;span class="sd"&gt;            numbers, email addresses, and even physical addresses of family&lt;/span&gt;
&lt;span class="sd"&gt;            members and friends.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;identifier&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# Rather than a &amp;#39;forbidden&amp;#39; result, we want to show a &amp;#39;Pet Not&lt;/span&gt;
            &lt;span class="c"&gt;#    Found&amp;#39; page so we can educate site users.&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PetDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetPetMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PetUpdateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetPetMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;
    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PetForm&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PetPDFView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetPetMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;

    &lt;span class="c"&gt;# snip: lots of code for rendering the PDFs.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we wire up the views into the urls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.defaults&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;quot;^build-cheatsheet/$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PetCreateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pet_create&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;quot;^update/(?P&amp;lt;identifier&amp;gt;[\w\d]+)/(?P&amp;lt;slug&amp;gt;[\w\d\-\_]+)/$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PetUpdateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pet_update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;quot;^(?P&amp;lt;identifier&amp;gt;[\w\d]+)/(?P&amp;lt;slug&amp;gt;[\w\d\-\_]+)/$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PetDetailView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pet_detail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c"&gt;# snip: a lot of other views&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="result"&gt;
&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;In the image below you can see how Marko's URL has his own unique identifier, along with his name. I can change the name in the URL or even in the database, but so long as I don't modify the identifying part of the URL (&lt;tt class="docutils literal"&gt;1m&lt;/tt&gt;), his information always shows up.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://petcheatsheets.com"&gt;&lt;img alt="petcheatsheets-url-example.png" class="img-polaroid align-center" id="pet-cheatsheets-url-example" src="petcheatsheets-url-example.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="howto"></category><category term="casestudy"></category><category term="hackathon"></category><category term="django-CBVs"></category></entry><entry><title>Django GetOrCreateView</title><link href="http://pydanny.com/django-getorcreateview.html" rel="alternate"></link><updated>2012-10-16T22:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/django-getorcreateview.html</id><summary type="html">&lt;p&gt;Today I decided to use the Django class based view (CBV) CreateView, but I wanted to avoid duplications and submit to the view from the front page of a site. The reason was I needed a simple newsletter signup form.  This is what I cooked up and should work for Django 1.3, 1.4, and the forthcoming 1.5 release. Here is what I did:&lt;/p&gt;
&lt;div class="section" id="installed-dependencies"&gt;
&lt;h2&gt;1. Installed dependencies&lt;/h2&gt;
&lt;p&gt;This version requires the following package to be &lt;cite&gt;pip&lt;/cite&gt; installed into your &lt;cite&gt;virtualenv&lt;/cite&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/django-extensions/django-extensions"&gt;django-extensions&lt;/a&gt; so we can have easy timestamps on models.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This also needs to be added to your list of INSTALLED_APPS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django_extensions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="defined-the-model"&gt;
&lt;h2&gt;2. Defined the model&lt;/h2&gt;
&lt;p&gt;The model is really simple, and inherits from &lt;cite&gt;TimeStampedModel&lt;/cite&gt; so we know when people signed up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_extensions.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TimeStampedModel&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewsLetterSignup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimeStampedModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmailField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wrote-the-view"&gt;
&lt;h2&gt;3. Wrote the view&lt;/h2&gt;
&lt;p&gt;Here's the somewhat challenging part that forced me to dive into Django's source code. Even with the documentation work we've done over the past few months, it's clear we've got a long way to go.&lt;/p&gt;
&lt;p&gt;Because of that source code diving, for this blog post I really did my best to document why I did things in the &lt;cite&gt;NewsLetterSignupView.form_valid()&lt;/cite&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CreateView&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NewsLetterSignup&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewsLetterSignupView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Signs up users to a newsletter &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewsLetterSignup&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/newsletter-signed-up/&amp;#39;&lt;/span&gt;  &lt;span class="c"&gt;# replace with reverse&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        If the form is valid, save the associated model.&lt;/span&gt;
&lt;span class="sd"&gt;            (django.views.generic.edit.ModelFormMixin)&lt;/span&gt;
&lt;span class="sd"&gt;        If the form is valid, redirect to the supplied URL.&lt;/span&gt;
&lt;span class="sd"&gt;            (django.views.generic.edit.FormMixin)&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="c"&gt;# Get the email from the form.cleaned_data dictionary&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Get or create the signup. We don&amp;#39;t need to do anything with the&lt;/span&gt;
        &lt;span class="c"&gt;#   model instance or created boolean so we don&amp;#39;t set them.&lt;/span&gt;
        &lt;span class="n"&gt;NewsLetterSignup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Don&amp;#39;t use super() to inherit as it will do a form.save()&lt;/span&gt;
        &lt;span class="c"&gt;# You could call the FormMixin&amp;#39;s form_valid() method but I think&lt;/span&gt;
        &lt;span class="c"&gt;#   using a HttpResponseRedirect() much more explicit.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;success_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wired-it-together"&gt;
&lt;h2&gt;4. Wired it together&lt;/h2&gt;
&lt;p&gt;In urls.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NewsLetterSignupView&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^newsletter-signed-up/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pages/newsletter_signed_up.html&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;newsletter_signedup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^newsletter-signup/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NewsLetterSignupView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;news_letter_signup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="closing-thoughts"&gt;
&lt;h2&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;First off, you'll notice I didn't include the &lt;cite&gt;pages/newsletter_signed_up.html&lt;/cite&gt; because for this case it's too trivial.&lt;/p&gt;
&lt;p&gt;Second, this is one of those very clear cases where a functional view would have been so much easier compared to the effort I spent writing this as a class based view. The line count would have been about the same, but the mental bandwidth involved in figuring this would have been a fraction of the effort I spent.&lt;/p&gt;
&lt;p&gt;Third, this is probably better served with an implementation &lt;cite&gt;django.views.generic.FormView&lt;/cite&gt;. Oh well...&lt;/p&gt;
&lt;p&gt;Fourth, I want to see a configurable version of this in the next release of &lt;a class="reference external" href="https://github.com/brack3t/django-braces/"&gt;django-braces&lt;/a&gt;. ;-)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="howto"></category><category term="django-CBVs"></category></entry><entry><title>Los Angeles Open Source Sprint on Nov 4th!</title><link href="http://pydanny.com/los-angeles-open-source-sprint-on-nov-4th.html" rel="alternate"></link><updated>2012-10-14T14:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/los-angeles-open-source-sprint-on-nov-4th.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://www.meetup.com/LA-Hackathons/events/85658952/"&gt;&lt;img alt="https://s3.amazonaws.com/pydanny/la_hackathons.jpeg" class="align-left" id="la-open-source-sprint-5" src="https://s3.amazonaws.com/pydanny/la_hackathons.jpeg" /&gt;&lt;/a&gt;
&lt;p&gt;Yet again, myself, Audrey Roy, and a small but elite cadre of volunteers are feverishly at work putting together another Los Angeles open source event. Our &lt;a class="reference external" href="http://pydanny.com/july-15th-2012-la-open-source-recap.html"&gt;last effort went smashingly well&lt;/a&gt;, and like any good engineer, we're ready to scale up - this time to 150 attendees!&lt;/p&gt;
&lt;p&gt;LA Open Source #5 is a day long coding event for Open Source developers of all languages and skill levels to come and code like fiends. They'll be joined by dozens of either really smart coders or nice people like me. Sponsors are providing food, drinks, venue, and more!&lt;/p&gt;
&lt;p&gt;RSVP at &lt;a class="reference external" href="http://www.meetup.com/LA-Hackathons/events/85658952/"&gt;http://www.meetup.com/LA-Hackathons/events/85658952/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'll be there to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Co-lead the event with the assistance of the awesome Los Angeles technical community!&lt;/li&gt;
&lt;li&gt;Code like a fiend. I plan to work on core &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt;. Maybe some ember.js stuff too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And now to open the floor to questions...&lt;/p&gt;
&lt;div class="section" id="when-and-where"&gt;
&lt;h2&gt;When and where?&lt;/h2&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Cross Campus (crosscamp.us)
820 Broadway
Santa Monica, CA
&lt;/pre&gt;
&lt;p&gt;When:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
November 4th, 2012
10 AM to 9 PM
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="is-this-like-a-hackathon"&gt;
&lt;h2&gt;Is this like a Hackathon?&lt;/h2&gt;
&lt;p&gt;Yup. See &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Hackathon#Sprints"&gt;http://en.wikipedia.org/wiki/Hackathon#Sprints&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-if-i-don-t-have-a-project-of-my-own-to-bring-should-i-come"&gt;
&lt;h2&gt;What if I don't have a project of my own to bring? Should I come?&lt;/h2&gt;
&lt;p&gt;Heck yeah! There will be a number of projects around that you can join and contribute to in order to make the world a better place. The current list of projects include things like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django - in fact, this time we've got at least one core Django developer!&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Rails&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;Pyramid&lt;/li&gt;
&lt;li&gt;Salt Stack&lt;/li&gt;
&lt;li&gt;Clojure&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="i-m-just-starting-as-a-developer-should-i-come"&gt;
&lt;h2&gt;I'm just starting as a developer, should I come?&lt;/h2&gt;
&lt;p&gt;It depends.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you've never coded before&lt;/strong&gt;, this isn't the right place. Instead, you might consider one of the local coding workshops or classes. In fact, here's a good &lt;a class="reference external" href="http://www.meetup.com/Los-Angeles-Hack-Night/"&gt;bi-weekly hack night / study group&lt;/a&gt; for you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you've done a tutorial or two&lt;/strong&gt;, sprints can be a great way to learn new skills or hone your technique by sitting alongside experienced developers who actually need your help. A lot of projects have what are called 'low hanging fruit', which are 'simpler' tasks saved for beginner developers to wet their teeth on. Things I've learned at events like these include Git, Mercurial, JQuery, and a hundred other things that have made me a better coder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-come-and-do-one-of-the-following"&gt;
&lt;h2&gt;Can I come and do one of the following:&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Recruit.&lt;/li&gt;
&lt;li&gt;Get people to work on my private project.&lt;/li&gt;
&lt;li&gt;Get people to work on my start-up idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;No.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is not a job fair or way to get free developers services, and we don't want unnecessary distractions.&lt;/p&gt;
&lt;p&gt;On the other hand, if you want to help sponsor we mention you on the official event description, in social media and many other perks. Please contact us at &lt;a class="reference external" href="mailto:sponsors&amp;#64;laopensource.org"&gt;sponsors&amp;#64;laopensource.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition, we're considering future events that mix in business into our efforts. If you're interested in that sort of thing then stay tuned for more announcements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-sponsorship"&gt;
&lt;h2&gt;What about sponsorship?&lt;/h2&gt;
&lt;p&gt;In return for sponsorship we mention your organization or person on the official event description, and provide many other perks including mention in social media.&lt;/p&gt;
&lt;p&gt;In fact, our attendees are well-noted for their feverish support of sponsors. Developer-only open source events are rare in Los Angeles, so attendees are incredibly grateful to those who make the event possible.&lt;/p&gt;
&lt;p&gt;If interested, please contact us at &lt;a class="reference external" href="mailto:sponsors&amp;#64;laopensource.org"&gt;sponsors&amp;#64;laopensource.org&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-do-i-need-to-bring"&gt;
&lt;h2&gt;What do I need to bring?&lt;/h2&gt;
&lt;p&gt;Your own functioning laptop with power cord. Neither event organizers, the venue, or sponsors are providing equipment. We also encourage you to bring a power strip labeled with your name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-m-sold-how-much-does-it-cost-and-where-do-i-register"&gt;
&lt;h2&gt;I'm sold! How much does it cost and where do I register?&lt;/h2&gt;
&lt;p&gt;The event is $10, covers food and drink for the day, and you can RSVP by clicking on the image below&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://www.meetup.com/LA-Hackathons/events/85658952/"&gt;&lt;img alt="https://s3.amazonaws.com/pydanny/open_source_sprint.png" class="align-left" id="la-open-source-sprints-logo" src="https://s3.amazonaws.com/pydanny/open_source_sprint.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="LA"></category><category term="sprint"></category><category term="hackathon"></category><category term="nodejs"></category><category term="ruby"></category><category term="rails"></category><category term="clojure"></category><category term="php"></category></entry><entry><title>We need more PyCon US 2013 submissions!</title><link href="http://pydanny.com/we-need-more-pycon-us-2013-submissions.html" rel="alternate"></link><updated>2012-09-27T18:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/we-need-more-pycon-us-2013-submissions.html</id><summary type="html">&lt;p&gt;The PyCon US 2013 &lt;a class="reference external" href="https://us.pycon.org/2013/speaking/cfp/"&gt;call for papers (CFP)&lt;/a&gt; ends tomorrow, September 28th, 2012. We need more talk and tutorial submissions. Talks are 30 or 45 minute efforts in front of the PyCon audience and are recorded for posterity. Tutorials are three hours long and are given to attendees who have paid an additional fee in order to slurp in knowledge from the masters.&lt;/p&gt;
&lt;p&gt;On the 3 hour tutorial side of things, &lt;strong&gt;we especially need more Intro to Python level submission&lt;/strong&gt;. That means getting beginners up to speed on basic Python techniques, so they can then exploit the other tutorials, conference, and sprints to their full advantage.&lt;/p&gt;
&lt;div class="section" id="now-onto-some-questions"&gt;
&lt;h2&gt;Now onto some questions...&lt;/h2&gt;
&lt;div class="section" id="i-would-like-to-give-a-tutorial-but-it-s-so-much-work-to-put-together-3-hours-of-quality-content"&gt;
&lt;h3&gt;1. I would like to give a tutorial but it's so much work to put together 3 hours of quality content.&lt;/h3&gt;
&lt;p&gt;The organizers of PyCon recognize that putting together a quality tutorial is an amazing amount of work. Which is why tutorial presenters are compensated for their effort.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-the-most-likely-length-talk-to-be-accepted-30-minutes-or-45-minutes"&gt;
&lt;h3&gt;2. What is the most likely length talk to be accepted? 30 minutes or 45 minutes?&lt;/h3&gt;
&lt;p&gt;The vast majority of PyCon sessions are 30 minutes long, so 45 minute slots are rare and valuable commodities. So if your talk needs to be 45 minutes long your  proposal has to really speak to the PyCon talk reviewers.&lt;/p&gt;
&lt;p&gt;Not only that, if reviewers send you information requests for any duration talk or tutorial, &lt;strong&gt;you dramatically increase your odds of talk acceptance with timely responses&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And, as said before, PyCon really needs more &lt;strong&gt;introductory level Python tutorial&lt;/strong&gt; submissions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-would-like-to-present-a-talk-or-tutorial-but-i-can-t-afford-to-come-to-pycon"&gt;
&lt;h3&gt;3. I would like to present a talk or tutorial but I can't afford to come to PyCon.&lt;/h3&gt;
&lt;p&gt;PyCon's &lt;a class="reference external" href="https://docs.google.com/spreadsheet/viewform?fromEmail=true&amp;amp;formkey=dGt4Z0dsY052VERJem4xUUFVQW9uQVE6MQ"&gt;financial aid program&lt;/a&gt; is said to favor accepted speakers to PyCon. They really want you to come!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-would-like-to-present-but-i-can-t-come-up-with-a-good-idea"&gt;
&lt;h3&gt;4. I would like to present but I can't come up with a good idea!&lt;/h3&gt;
&lt;p&gt;I had this problem as well! Then I looked at the &lt;a class="reference external" href="https://us.pycon.org/2013/tutorials/suggested_topics_2012/"&gt;Suggested Tutorial Topics&lt;/a&gt; and got some ideas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ack-i-ve-got-a-talk-idea-but-it-s-going-to-take-me-too-much-time-to-put-it-together"&gt;
&lt;h3&gt;5. Ack! I've got a talk idea but it's going to take me too much time to put it together!&lt;/h3&gt;
&lt;p&gt;Submit the talk anyway before the talk and in fields you aren't ready to fill in, simply put '&lt;strong&gt;TBD&lt;/strong&gt;'. Then over the course of the next few days replace TBD with real material. Don't wait too long though to fix those TBDs, no more than a week!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-m-a-beginner-nobody-in-the-community-is-there-any-chance-my-proposal-will-get-accepted"&gt;
&lt;h3&gt;6. I'm a beginner/nobody in the community, is there any chance my proposal will get accepted?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Absolutely!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The PyCon talk/tutorial reviewers love to see new people present. While experienced/proven speakers have an edge, good talk/tutorial proposals from promising candidates &lt;strong&gt;can&lt;/strong&gt; make it into the conference. Carefully double-check your submission, be responsive to reviewers, and stay positive. I'm not saying you will get in, but I am saying it's worth the effort.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="good-luck"&gt;
&lt;h2&gt;Good luck!&lt;/h2&gt;
&lt;p&gt;PyCon 2013 is going to be bigger and better than any previous year. That's because we pull together as a community to run an amazing event that is known to jumpstart careers and cause amazing life changes. We can't do this without you, so hurry up on your &lt;a class="reference external" href="https://us.pycon.org/2013/speaking/cfp/"&gt;PyCon US 2013 submissions&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="pycon"></category><category term="django"></category></entry><entry><title>Installing Pycairo on Mountain Lion</title><link href="http://pydanny.com/installing-pycairo-on-mountain-lion.html" rel="alternate"></link><updated>2012-09-04T10:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/installing-pycairo-on-mountain-lion.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://cairographics.org/pycairo/"&gt;Pycairo&lt;/a&gt; is the binding for the &lt;a class="reference external" href="http://cairographics.org/"&gt;cairo graphics library&lt;/a&gt;. It's also not something you can get running with a simple &lt;tt class="docutils literal"&gt;pip install py2cairo&lt;/tt&gt;. After many hours of working the search engines and dancing to the configure/make/make install melody, I figured out an answer that worked for me.&lt;/p&gt;
&lt;div class="section" id="step-1-install-gcc"&gt;
&lt;h2&gt;Step 1 - Install GCC&lt;/h2&gt;
&lt;p&gt;If you don't have it yet, go get &lt;a class="reference external" href="https://github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.7-v2.pkg"&gt;https://github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.7-v2.pkg&lt;/a&gt; and install it. It's 200 MB so make sure you have a fast connection and/or a good place to wait.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-install-homebrew"&gt;
&lt;h2&gt;Step 2 - Install Homebrew&lt;/h2&gt;
&lt;p&gt;I use Homebrew instead of Macports. If you don't have it yet, paste this in a terminal prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ruby &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;curl -fsSkL raw.github.com/mxcl/homebrew/go&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-install-cairo"&gt;
&lt;h2&gt;Step 3 - Install Cairo&lt;/h2&gt;
&lt;p&gt;In your terminal prompt, type the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install cairo --use-clang
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You'll get some messages about &lt;cite&gt;LDFLAGS&lt;/cite&gt; and &lt;cite&gt;CPPFLAGS&lt;/cite&gt; in build variables, but that's only important if you skip Homebrew and build your own software later that interacts with &lt;strong&gt;cairo&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-install-pycairo-itself"&gt;
&lt;h2&gt;Step 4 - Install Pycairo itself&lt;/h2&gt;
&lt;p&gt;The nasty little trick to this is to remember that &lt;strong&gt;Pycairo&lt;/strong&gt; is packaged on it's site and other places as &lt;strong&gt;py2cairo&lt;/strong&gt;. When they get around to releasing version 3 of Pycairo, I'm going to beg and plead that they follow an obvious naming system for their bundles. I know this is done in other communities, but it's frustrating and a real barrier for getting into a project.&lt;/p&gt;
&lt;p&gt;In case, in your terminal prompt, type the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install py2cairo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are using a non-Homebrew installed Python like I do, you have to set the PYTHONPATH to find pycairo.  Set your PYTHONPATH in your &lt;cite&gt;.bashrc/.profile/.whatever&lt;/cite&gt; to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/lib/python2.7/site-packages:&lt;span class="nv"&gt;$PYTHONPATH&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes, it's the system Python, but for now I'm okay with it. If someone has an easy recipe for alternative Python installations, I would love to link to it.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="tools"></category><category term="howto"></category><category term="setup"></category></entry><entry><title>Thoughts on my stack</title><link href="http://pydanny.com/thoughts-on-my-stack.html" rel="alternate"></link><updated>2012-09-04T10:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/thoughts-on-my-stack.html</id><summary type="html">&lt;p&gt;I'm an open source developer. I use Python, Django, PostgreSQL, JQuery, MongoDB, Memcached, and Redis. I push production code to Linux servers.&lt;/p&gt;
&lt;p&gt;And yet:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My laptop runs Apple's Mac OS X.&lt;/li&gt;
&lt;li&gt;My primary editor is Sublime Text.&lt;/li&gt;
&lt;li&gt;My production servers are provided mostly by Heroku.&lt;/li&gt;
&lt;li&gt;All my sites are hosted on Amazon EC2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've got nothing against Apple, Heroku, or Amazon, but their tools are not open source.&lt;/p&gt;
&lt;p&gt;And that's food for thought.&lt;/p&gt;
</summary><category term="python"></category><category term="django"></category><category term="tools"></category></entry><entry><title>Python dictionary as a class</title><link href="http://pydanny.com/python-dictionary-as-a-class.html" rel="alternate"></link><updated>2012-09-01T01:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/python-dictionary-as-a-class.html</id><summary type="html">&lt;p&gt;A long time ago, circa 1999, when I was working in a certain procedural language I found a library that added objects to the language. It did so by playing interesting tricks with key/value structures, which in &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; are called &lt;cite&gt;dictionaries&lt;/cite&gt;. In 2005, as a new Python user, I read something about how objects in Python are essentially dictionaries with &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Syntactic_sugar"&gt;syntactical sugar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Well, today while driving from Los Angeles to San Francisco, I started to try and figure out how to replicate object or class-like behavior using Python dictionaries. In this exercise, I wanted to code out the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;methods with ability to write to self/this/whatever&lt;/li&gt;
&lt;li&gt;inheritance&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The result isn't something I would use in production code, but it was fun to write. Without further ado...&lt;/p&gt;
&lt;div class="section" id="i-present-the-newclass-function"&gt;
&lt;h2&gt;I present the 'newclass' function!&lt;/h2&gt;
&lt;p&gt;What &lt;tt class="docutils literal"&gt;newclass&lt;/tt&gt; does is simple:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Document implementation of inheritance.&lt;/li&gt;
&lt;li&gt;Include a simple &lt;tt class="docutils literal"&gt;set&lt;/tt&gt; method for setting attribute values to self/this/whatever.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Use kwargs.update() method to handle inheritance &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Sets key/value to the kwargs.&lt;/span&gt;
&lt;span class="sd"&gt;            Replicates self/this clumsily&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that you've seen the code, let's try it out.&lt;/p&gt;
&lt;div class="section" id="demonstration-methods-with-ability-to-write-to-self-this-whatever"&gt;
&lt;h3&gt;Demonstration: Methods with ability to write to self/this/whatever&lt;/h3&gt;
&lt;p&gt;Instantiating a &lt;tt class="docutils literal"&gt;newclass&lt;/tt&gt; 'object' is straight-forward. See below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Danny&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;mental_age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mental_age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10bc902a8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Danny&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;languages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;JavaScript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;languages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;JavaScript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mental_age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10bc902a8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Danny&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Setting a value to an attribute can be done via the &lt;tt class="docutils literal"&gt;set&lt;/tt&gt; method is not pretty, but it works. Yes, you can shortcut &lt;tt class="docutils literal"&gt;set&lt;/tt&gt;, but I wanted to see if it worked. That it's working is important because since &lt;tt class="docutils literal"&gt;set&lt;/tt&gt; works, it means we can create much more complicated methods that touch on many parts of the newclass object context.&lt;/p&gt;
&lt;p&gt;Just like a normal Python &lt;tt class="docutils literal"&gt;class&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;method&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="demonstration-inheritance"&gt;
&lt;h3&gt;Demonstration: Inheritance&lt;/h3&gt;
&lt;p&gt;Here I show how to use the &lt;tt class="docutils literal"&gt;dict.update()&lt;/tt&gt; method to display inheritance. I'll demonstrate via the use of the Mammal/Cat/Dog example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Mammal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; The mammal base class &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;# dict.update handles the role of inheritance&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newclass&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c"&gt;# Mammals have 4 legs&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;legs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="c"&gt;# Using lambda cause I&amp;#39;m lazy.&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;say&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;NotImplemented&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# dict.update handles the role of inheritance&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mammal&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c"&gt;# Make a sound&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;say&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Meow&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# dict.update handles the role of inheritance&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mammal&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c"&gt;# dict.update handles the role of inheritance&lt;/span&gt;

    &lt;span class="c"&gt;# Make a sound&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;say&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Bark&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alright, we have our code. What happens when we try it out?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# first we try just the Mammal&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mammal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mammal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mammal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;say&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]())&lt;/span&gt;
&lt;span class="bp"&gt;NotImplemented&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mammal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;legs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# Now the Cat&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;say&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]())&lt;/span&gt;
&lt;span class="n"&gt;Meow&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;legs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# Finally the dog&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;say&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]())&lt;/span&gt;
&lt;span class="n"&gt;Bark&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;legs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Compared to normal Python classes the syntax is a little bit on the ugly side. Yet this works and as I said earlier, it was fun to write.&lt;/p&gt;
&lt;p&gt;Some questions...&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Should I change the name of the internal context variable from &lt;tt class="docutils literal"&gt;kwargs&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;self&lt;/tt&gt;?&lt;/li&gt;
&lt;li&gt;How fast is &lt;tt class="docutils literal"&gt;newclass&lt;/tt&gt; compared to the standard Python &lt;tt class="docutils literal"&gt;class&lt;/tt&gt; system?&lt;/li&gt;
&lt;li&gt;What happens if you use &lt;tt class="docutils literal"&gt;newclass&lt;/tt&gt; in a complex project?&lt;/li&gt;
&lt;li&gt;Shouldn't I implement some way to track inheritance chains? Wouldn't it be nice to know the parent of an object?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="howto"></category></entry><entry><title>A Public Service Message to the Python Community</title><link href="http://pydanny.com/a-public-service-message-to-the-python-community.html" rel="alternate"></link><updated>2012-08-20T14:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/a-public-service-message-to-the-python-community.html</id><summary type="html">&lt;p&gt;Hi, I'm Daniel Greenfeld. You might know me from my &lt;a class="reference external" href="http://pydanny.com"&gt;blog&lt;/a&gt;. I'm here to talk to you about a very import subject: &lt;strong&gt;Submitting your talk early to PyCon US.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Last year there were hundreds of talks were submitted for just a very few speaking slots. &lt;strong&gt;Unpaid volunteers&lt;/strong&gt; labored for hours before and after their normal jobs reviewing and debating which talks were to get in. The volume of talks combined with simple reviewer fatigue means that earlier submitted talks got more attention.&lt;/p&gt;
&lt;p&gt;This year, following the pattern of previous years, we're going to have 25% more talk submissions.&lt;/p&gt;
&lt;div class="section" id="please-don-t-leave-your-poor-talk-or-tutorial-out-in-the-cold"&gt;
&lt;h2&gt;Please don't leave your poor talk or tutorial out in the cold.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Submit early.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Help us fix the problem in one of two ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://us.pycon.org/2013/speaking/cfp"&gt;Submit your talk as early as possible&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pycon.blogspot.com/2012/07/i-want-you-for-pycon-program-commitee.html"&gt;Help review PyCon US talks&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="production-notes-for-this-service-message"&gt;
&lt;h2&gt;Production notes for this service message&lt;/h2&gt;
&lt;p&gt;I've always wanted to do one of those TV public service messages done by B or C grade actors. As a D-grade blogger I thought I might be a pretty good match for the role. :-)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="pycon"></category><category term="django"></category></entry><entry><title>PyCon 2013 Talks/Tutorials I want to see</title><link href="http://pydanny.com/pycon-2013-talkstutorials-i-want-to-see.html" rel="alternate"></link><updated>2012-08-20T14:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/pycon-2013-talkstutorials-i-want-to-see.html</id><summary type="html">&lt;p&gt;This morning, &lt;a class="reference external" href="http://jessenoller.com/"&gt;Jesse Noller&lt;/a&gt;, the chair of PyCon US, suggested a meme, &amp;quot;&lt;a class="reference external" href="https://us.pycon.org/2013"&gt;PyCon 2013&lt;/a&gt; &lt;strong&gt;talks/tutorials I'd like to see&lt;/strong&gt;&amp;quot;. Here is my meme submission:&lt;/p&gt;
&lt;div class="section" id="python-obfuscation-contest"&gt;
&lt;h2&gt;1. Python Obfuscation Contest&lt;/h2&gt;
&lt;p&gt;This &lt;strong&gt;certain-to-be-controversial talk idea&lt;/strong&gt; would be where the speaker would solicit Pythonistas to submit a single arcane &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; code module that would have to display the text of &amp;quot;&lt;em&gt;Although that way may not be obvious at first unless you're Dutch.&lt;/em&gt;&amp;quot; There would be a '&lt;em&gt;Expert&lt;/em&gt;' category which would forbid the eval/exec functions. The &amp;quot;&lt;em&gt;Anything Goes Category&lt;/em&gt;&amp;quot; would allow use of &lt;strong&gt;eval/exec&lt;/strong&gt;. The conference talk would be where the speaker announces the winners and comments on the brilliant insanity of submissions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-in-space"&gt;
&lt;h2&gt;2. Python in Space!!!!&lt;/h2&gt;
&lt;p&gt;I want to hear any talk on how Python is used in space exploration or research. That includes NASA, SpaceX, ESA staffers or citizen scientists.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="template-language-shootout"&gt;
&lt;h2&gt;3. Template Language Shootout&lt;/h2&gt;
&lt;p&gt;I want a benchmark heavy talk on the raw speed of various Python template systems, complete with hard numbers and pretty charts. This isn't just a matter of speed, but also a measure of terseness and total usage. The test code will need to be made public so it can be vetted, debated, and expanded upon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-3-from-scratch"&gt;
&lt;h2&gt;4. Python 3 from scratch&lt;/h2&gt;
&lt;p&gt;I want to see a talk that shows how by using Python 3 from the start, you content that you got a edge over Python 2.x. This case study should be as technical as possible and shouldn't have anything do with migrating from 2.x to 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fun-and-games-with-numpy"&gt;
&lt;h2&gt;5. Fun and games with NumPy&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://numpy.scipy.org/"&gt;NumPy&lt;/a&gt; is an incredible library. It deserves a talk, specifically one where it is demonstrated to do something amazing. Maybe it's something scientific, maybe it's something crunching social data, maybe it's something I can't begin to imagine. Surprise and impress me!&lt;/p&gt;
&lt;p&gt;There you go, my submission of 5 talks to the &amp;quot;&lt;a class="reference external" href="https://us.pycon.org/2013"&gt;PyCon 2013&lt;/a&gt; &lt;strong&gt;talks/tutorials I'd like to see&lt;/strong&gt;&amp;quot; meme. What do you want to see?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;And now it's time for...&lt;/p&gt;
&lt;div class="section" id="a-public-service-message-to-the-python-community"&gt;
&lt;h3&gt;A Public Service Message to the Python Community&lt;/h3&gt;
&lt;p&gt;Hi, I'm Daniel Greenfeld. You might know me from my &lt;a class="reference external" href="http://pydanny.com"&gt;blog&lt;/a&gt;. I'm here to talk to you about a very import subject: &lt;strong&gt;Submit your talk early to PyCon US.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Last year there were hundreds of talks submitted for just a very few speaking slots. Unpaid volunteers labored for hours before and after their normal jobs reviewing and debating which talks were to get in. The volume of talks combined with simple reviewer fatigue means that earlier submitted talks get more attention.&lt;/p&gt;
&lt;p&gt;Don't leave your poor talk or tutorial out in the cold. Help us fix the problem in one of two ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://us.pycon.org/2013/speaking/cfp"&gt;Submit your talk as early as possible&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pycon.blogspot.com/2012/07/i-want-you-for-pycon-program-commitee.html"&gt;Help review PyCon US talks&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="pycon"></category><category term="meme"></category></entry><entry><title>Python dictionary vs JavaScript object: Dynamic Keys</title><link href="http://pydanny.com/python-dictionary-vs-javascript-object-dynamic-keys.html" rel="alternate"></link><updated>2012-08-19T03:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/python-dictionary-vs-javascript-object-dynamic-keys.html</id><summary type="html">&lt;p&gt;One of the things I noticed a long time ago with JavaScript is that when you create objects you can define keys outside of strings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;San Francisco&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In JavaScript, this is valid. In Python, you'll get a &lt;tt class="docutils literal"&gt;NameError&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;San Francisco&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;input&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;city&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Normally this isn't too big of an issue, except when you want to use JavaScript to create object keys based off of values in a variable. Which means that while this code works fine in Python...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;region_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;state&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;region_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Californa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;San Francisco&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;Californa&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;...it fails in JavaScript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;region_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;state&amp;#39;&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;region_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Californa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;San Francisco&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;region_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Californa&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this means is that if you want to define object keys dynamically in JavaScript, you need to add an extra line(s) of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;region_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;gt; var o = {&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;San&lt;/span&gt; &lt;span class="nx"&gt;Francisco&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;}&lt;/span&gt;
&lt;span class="s2"&gt;  Object&lt;/span&gt;
&lt;span class="s2"&gt;&amp;gt; o[region_name] = &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;California&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; // Add dynamic key here&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;California&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;gt; o[&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;]&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;California&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python is  consistent in how it deals with &lt;cite&gt;named&lt;/cite&gt; objects. If you haven't named something, Python throws the &lt;tt class="docutils literal"&gt;NameError&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;JavaScript seems to send out an &lt;tt class="docutils literal"&gt;undefined&lt;/tt&gt; unless you are defining an object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="javascript"></category><category term="vs"></category></entry><entry><title>Django Requirements 2012-08-15</title><link href="http://pydanny.com/django-requirements-2012-08-15.html" rel="alternate"></link><updated>2012-08-15T18:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/django-requirements-2012-08-15.html</id><summary type="html">&lt;p&gt;A little over three months ago &lt;a class="reference external" href="http://pydanny.com/django-requirements-for-a-project.html"&gt;I blogged about my preferred requirements&lt;/a&gt; list.
It's now nearly the eve of &lt;a class="reference external" href="http://djangodash.com"&gt;Django Dash&lt;/a&gt;, and I feel it's time to update the list.
I'm going to bump the versions on some of the existing packages and add some new ones to the list.&lt;/p&gt;
&lt;div class="section" id="new-packages"&gt;
&lt;h2&gt;New Packages&lt;/h2&gt;
&lt;div class="section" id="django-braces-0-1-3"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-braces/"&gt;django-braces==0.1.3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Want to use Django Class Based Views but unhappy with the missing components like &lt;tt class="docutils literal"&gt;LoginRequiredMixin&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;SelectRelatedMixin&lt;/tt&gt;, and even &lt;tt class="docutils literal"&gt;StaffuserRequiredMixin&lt;/tt&gt;? Not to worry, as this library will make Django CBVs &lt;strong&gt;134% easier to use&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-secure-0-1-2"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-secure/"&gt;django-secure==0.1.2&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Django is rather secure, but there is a checklist of things that the security experts want you to do.
Save yourself forgetting something and use this library to do all those little things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-profiletools-0-1-3"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-profiletools/"&gt;django-profiletools==0.1.3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Have you ever used the django-debug-toolbar and noticed that you did that same &lt;tt class="docutils literal"&gt;request.user.get_profile()&lt;/tt&gt; call
a dozen times? Ever want to just call that once? This library, by yours truly, resolves the issue. It loads the user's
profile object once, and then passes it down the request chain.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="existing-packages"&gt;
&lt;h2&gt;Existing Packages&lt;/h2&gt;
&lt;div class="section" id="django-1-4-1"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/Django/1.4.1"&gt;Django==1.4.1&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you need sessions, forms, templates, and relational database models, then I can argue you've got the ideal &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; project.
Make certain you are running the latest Django version (1.4.1). If you have any reason to stick to the Django 1.3 series, I advise
bumping it up to Django 1.3.2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="psycopg2-2-4-5"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/psycopg2"&gt;psycopg2==2.4.5&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the database connector to PostgreSQL, which is what you should be using. Django is known for playing 'nicer'
with PostgreSQL than say... MySQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-debug-toolbar-0-9-4"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-debug-toolbar"&gt;django-debug-toolbar==0.9.4&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because not using this tool is insane.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-extensions-0-8"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-extensions"&gt;django-extensions==0.8&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because amongst other things this library gives you, I never want to write my own &lt;tt class="docutils literal"&gt;TimeStampedModel&lt;/tt&gt; ever again. :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="south-0-7-6"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/South"&gt;South==0.7.6&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Django gives you the freedom to migrate data in the way you want. The way I want to do it is via South.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-registration-0-8-0"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-registration"&gt;django-registration==0.8.0&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The common go-to tool for non-Social registration.&lt;/p&gt;
&lt;p&gt;This is a very solid tool, but you do have to make your own templates or find someone's fork that has a copy of templates that match.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-social-auth-0-7-4"&gt;
&lt;h3&gt;django-social-auth== 0.7.4&lt;/h3&gt;
&lt;p&gt;Want to authenticate via Twitter, Facebook, or GitHub? Then use this very useful package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-floppyforms-1-0"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-floppyforms"&gt;django-floppyforms==1.0&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An excellent tool for making your forms HTML5-ish out of the box. It allows full control of form rendering in the templates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-crispy-forms-1-1-4"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-crispy-forms"&gt;django-crispy-forms==1.1.4&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The child of my own django-uni-forms, this will let me create forms using div-based controls super fast, and do layout customizations if I need them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-heroku-postgresify-0-2"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-heroku-postgresify"&gt;django-heroku-postgresify==0.2&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This tool makes getting the PostGreSQL settings out of Heroku trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-heroku-memcacheify-0-3"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-heroku-memcacheify"&gt;django-heroku-memcacheify==0.3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This tool makes getting the memcache settings for Heroku trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gunicorn-0-14-6"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/gunicorn"&gt;gunicorn==0.14.6&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All the cool kids who play in devops swear by Gunicorn.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="installing-the-above-packages"&gt;
&lt;h2&gt;Installing the above packages&lt;/h2&gt;
&lt;p&gt;Never copy/paste these libraries directly into your projects. Do it the right way: &lt;strong&gt;use proper Python dependency management&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Create a &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; file and install them as proper dependencies. The file should contain the following text:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Django==1.4.1
South==0.7.5
django-braces==0.1.3
django-crispy-forms==1.1.4
django-debug-toolbar==0.9.4
django-extensions==0.8
django-floppyforms==1.0
django-social-auth==0.7.4
django-heroku-memcacheify==0.3
django-heroku-postgresify==0.2
django-profiletools==0.1.3
django-registration==0.8.0
django-secure==0.1.2
gunicorn==0.14.2
psycopg2==2.4.5
&lt;/pre&gt;
&lt;p&gt;Once you have that, you install them thus in your &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install -r requirements.txt
&lt;/pre&gt;
&lt;p&gt;Now that I have all this, it's time to code!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="djangodash"></category><category term="setup"></category></entry><entry><title>Curiosity has landed!</title><link href="http://pydanny.com/curiosity-has-landed.html" rel="alternate"></link><updated>2012-08-06T08:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/curiosity-has-landed.html</id><summary type="html">&lt;p&gt;I'm terribly proud of what was accomplished last night: A car-sized robot weighing a whopping 8,580 pounds (3,893 kg) was landed on Mars. It is packed with scientific packages that will expand our knowledge of Mars, and has the power to use them for at least 14 years.&lt;/p&gt;
&lt;p&gt;Simply put, this is an incredible step forward.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://en.wikipedia.org/wiki/File:Mars_Science_Laboratory_Curiosity_rover.jpg"&gt;&lt;img alt="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Mars_Science_Laboratory_Curiosity_rover.jpg/800px-Mars_Science_Laboratory_Curiosity_rover.jpg" class="align-center" id="artist-impression-of-curiosity-on-mars" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Mars_Science_Laboratory_Curiosity_rover.jpg/800px-Mars_Science_Laboratory_Curiosity_rover.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;As an American, I'm proud that our nation is capable of putting together such amazing feats of engineering and science. People from a diverse arrangement of backgrounds and origins came together to make something incredible happen.&lt;/p&gt;
&lt;p&gt;As a human being, I'm proud that we have yet again proven that we are still capable of working together to make amazing things happen.&lt;/p&gt;
&lt;p&gt;As someone who grew up in the 1970s, and someone who is proud to have worked at &lt;a class="reference external" href="http://www.nasa.gov"&gt;NASA&lt;/a&gt; for over 5 years, this is my American dream.&lt;/p&gt;
&lt;div class="section" id="going-forward"&gt;
&lt;h2&gt;Going Forward&lt;/h2&gt;
&lt;p&gt;Curiosity is about to do amazing things and will tell a story to us that we'll never forget.&lt;/p&gt;
&lt;p&gt;Alas, NASA is a terribly easy target for politicians. It's budget has shrank to a small fraction of the it's early 1970s high, and it remains a target to this day. While the politicians congratulate the JPL team on one hand, they are also cutting the JPL budget in a short-sighted attempt to make themselves look good. History will not be kind to such politicians.&lt;/p&gt;
&lt;p&gt;The answers to our questions and our problems will be found in the heavens. Let's increase NASA funding and populate the world with miracles of science.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="nasa"></category><category term="science"></category><category term="python"></category><category term="django"></category></entry><entry><title>Deadline for DjangoCon Financial Aid requests is tomorrow!</title><link href="http://pydanny.com/deadline-for-djangocon-financial-aid-requests-is-tomorrow.html" rel="alternate"></link><updated>2012-08-02T21:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/deadline-for-djangocon-financial-aid-requests-is-tomorrow.html</id><summary type="html">&lt;p&gt;For 2012, &lt;a class="reference external" href="http://www.djangocon.us/"&gt;DjangoCon US&lt;/a&gt; has moved to Washington, DC, and everyone is invited! If you need financial support to get there, the &lt;a class="reference external" href="https://www.djangoproject.com/foundation/"&gt;Django Software Foundation&lt;/a&gt; and &lt;a class="reference external" href="http://pyladies.com/"&gt;PyLadies&lt;/a&gt; have paired with a number of forward thinking sponsors to help get you there. All genders are eligible for assistance, so don't hesitate to submit your application.&lt;/p&gt;
&lt;p&gt;The deadline for financial aid requests is tomorrow, Friday, August 3rd by 11:59pm Eastern Time.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.google.com/spreadsheet/viewform?formkey=dDc1X2hrUGJVRGdEWnRjTklxR2tSNFE6MQ#gid=0"&gt;Apply while you still have time!&lt;/a&gt;&lt;/p&gt;
</summary><category term="django"></category><category term="djangocon"></category><category term="pyladies"></category><category term="dsf"></category></entry><entry><title>Attaching custom exceptions to functions and classes</title><link href="http://pydanny.com/attaching-custom-exceptions-to-functions-and-classes.html" rel="alternate"></link><updated>2012-08-02T09:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/attaching-custom-exceptions-to-functions-and-classes.html</id><summary type="html">&lt;p&gt;Having too many custom exceptions on a project can be a pain, but a few choices ones are really nice. The problem is that in complex libraries having to import both functions and exceptions becomes a drag. To mitigate having to remember to import custom exceptions, this is a handy pattern you can use in a project and can be done on both functions and classes.&lt;/p&gt;
&lt;div class="section" id="attaching-a-custom-exception-to-a-function"&gt;
&lt;h2&gt;Attaching a custom exception to a function&lt;/h2&gt;
&lt;p&gt;This works because &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; functions are first-class objects. They can be passed around as things, and in this case, have things assigned to them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# logic.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DoesNotCompute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Easy to understand naming conventions work best! &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;this_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; This function only works on numbers.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;DoesNotCompute&lt;/span&gt;

&lt;span class="c"&gt;# Assign DoesNotCompute exception to this_function&lt;/span&gt;
&lt;span class="n"&gt;this_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoesNotCompute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DoesNotCompute&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I can import the function, and it won't just through &lt;tt class="docutils literal"&gt;DoesNotCompute&lt;/tt&gt; exceptions, it will also carry the function along with the import:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;this_function&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3125&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;869.8739233809259&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;will throw an error.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;input&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;logic.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;this_function&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;DoesNotCompute&lt;/span&gt;
&lt;span class="n"&gt;DoesNotCompute&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alright, that doesn't seem like much, but let's add in some exception handling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;this_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;is an example&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;this_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoesNotCompute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;See what attaching custom exceptions to functions can do?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="n"&gt;attaching&lt;/span&gt; &lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="n"&gt;exceptions&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;functions&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="attaching-the-custom-exception-to-a-class"&gt;
&lt;h2&gt;Attaching the custom exception to a class&lt;/h2&gt;
&lt;p&gt;All we have to do is enhance our existing &lt;cite&gt;logic.py&lt;/cite&gt; file by adding &lt;tt class="docutils literal"&gt;ThisClass&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# logic.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DoesNotCompute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Easy to understand naming conventions work best! &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c"&gt;# removed the function example for clarity&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThisClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Since the DoesNotCompute exception exists, let&amp;#39;s just assign it&lt;/span&gt;
    &lt;span class="c"&gt;# as an attribute of ThisClass&lt;/span&gt;
    &lt;span class="n"&gt;DoesNotCompute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DoesNotCompute&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;this_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; This method only works on numbers.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;DoesNotCompute&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now to demonstrate in the shell (Python REPL for the semantic purists):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;t&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ThisClass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ThisClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;this_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;51.415729444066585&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;this_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;this_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Jack Diederich warned against custom exceptions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;input&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;logic.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;this_method&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;DoesNotCompute&lt;/span&gt;
&lt;span class="n"&gt;DoesNotCompute&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;this_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;this_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;I need to write a follow-up on my OAuth post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ThisClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoesNotCompute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Waiting to see how the OAuth stuff pans out&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Waiting&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;OAuth&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="n"&gt;pans&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="admonition-don-t-go-crazy"&gt;
&lt;h2&gt;Admonition: Don't go crazy&lt;/h2&gt;
&lt;p&gt;Rather than use this trick all over the place, considering using it in a few places to powerful effect. For example, &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; uses it only in a few places, and publicly only on &lt;tt class="docutils literal"&gt;MyModelClass.DoesNotExist&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;MyModelClass.MultipleObjectsReturned&lt;/tt&gt;. By limiting Django's use of this technique, Django libraries are that much easier to comprehend. In this case, less complexity means more.&lt;/p&gt;
&lt;p&gt;I say this because this pattern lends itself to creating custom exceptions to the point of effectively replacing Python's stock exceptions with your own. This  makes for harder-to-maintain and harder-to-learn projects.&lt;/p&gt;
&lt;p&gt;Not that I've ever done that. Ahem.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="functions"></category><category term="howto"></category><category term="django"></category></entry><entry><title>Django Update View without slug in the url</title><link href="http://pydanny.com/django-update-view-without-slug-in-the-url.html" rel="alternate"></link><updated>2012-07-28T09:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/django-update-view-without-slug-in-the-url.html</id><summary type="html">&lt;p&gt;Today I wanted to use the Django Class Based View (CBV) UpdateView but without a slug identifier in the URL. For example, instead of &lt;tt class="docutils literal"&gt;/profiles/pydanny/&lt;/tt&gt; I would go to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/my-crazy-profile/&lt;/span&gt;&lt;/tt&gt;. Also, I needed to force authentication.&lt;/p&gt;
&lt;p&gt;I've done this with Django functional views a few times times, but today I did it in Django. This is what I did:&lt;/p&gt;
&lt;div class="section" id="added-django-braces-to-my-project"&gt;
&lt;h2&gt;1. Added django-braces to my project&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/kennethlove"&gt;Kenneth Love&lt;/a&gt; and &lt;a class="reference external" href="https://twitter.com/tehjones"&gt;Chris Jones&lt;/a&gt;' awesome &lt;a class="reference external" href="https://github.com/brack3t/django-braces/"&gt;django-braces&lt;/a&gt; package has some very handy mixins for working with Django CBVs. Kenneth and Chris really understand CBVs, specifically on how to extend them, and have provided a bunch of really useful utility methods in the django-braces library. Yeah, I could figure this stuff out on my own, but since those guys already did the hard work I might as well just lean on them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install django-braces&lt;span class="o"&gt;==&lt;/span&gt;0.1.3
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;braces&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wrote-the-view"&gt;
&lt;h2&gt;2. Wrote the view&lt;/h2&gt;
&lt;p&gt;Assuming a very simple profile Model and Form (which they weren't - but that's not what this post is about), this is how I implemented the view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# profiles/views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;braces.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;  &lt;span class="c"&gt;# handles authentication&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;profiles.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProfileForm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;profiles.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProfileUpdateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProfileForm&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/my-crazy-profile/&amp;quot;&lt;/span&gt;  &lt;span class="c"&gt;# You should be using reverse here&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wrote-the-urlconf"&gt;
&lt;h2&gt;3. Wrote the URLconf&lt;/h2&gt;
&lt;p&gt;The URL pretty much wrote itself:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.defaults&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;profiles&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^my-crazy-profile/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProfileUpdateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;profile_update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="closing-thoughts"&gt;
&lt;h2&gt;Closing Thoughts&lt;/h2&gt;
&lt;p&gt;For a while, I've used django-braces for anything that involves CBVs. I can't imagine working on projects using CBVs without them. In fact, some of the mixins such as &lt;tt class="docutils literal"&gt;LoginRequiredMixin&lt;/tt&gt; are things that I could argue ought to be in core Django.&lt;/p&gt;
&lt;p&gt;This pattern really nails the sweet spot of Django CBVs. Thanks to the use of mixins and model forms, I get an amazing amount of stuff done in a 5 line CBV.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="howto"></category><category term="django-CBVs"></category></entry><entry><title>July 15th, 2012 LA Open Source Recap</title><link href="http://pydanny.com/july-15th-2012-la-open-source-recap.html" rel="alternate"></link><updated>2012-07-16T18:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/july-15th-2012-la-open-source-recap.html</id><summary type="html">&lt;p&gt;On July 15th, 2012, at the &lt;a class="reference external" href="http://www.meetup.com/LA-Hackathons/events/64542582/"&gt;July LA Hackathons Open Source event&lt;/a&gt;, over 60 &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt;, &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt;, &lt;a class="reference external" href="http://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;, &lt;a class="reference external" href="http://rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt;, &lt;a class="reference external" href="http://www.php.net/"&gt;PHP&lt;/a&gt;, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/JavaScript"&gt;JavaScript&lt;/a&gt;, &lt;a class="reference external" href="http://nodejs.org/"&gt;Node.js&lt;/a&gt;, &lt;a class="reference external" href="http://www.perl.org/"&gt;Perl&lt;/a&gt;, and &lt;a class="reference external" href="http://clojure.org"&gt;Clojure&lt;/a&gt; developers arrived to work on a variety of projects. We went from 10 AM to 10 PM, and there was much coding and learning done by all. There was a very powerful vibe shared by nearly everyone there, and it was great to see so many people from different personal and open source backgrounds working together and having a great time as a group.&lt;/p&gt;
&lt;div class="section" id="filtering-out-distractions"&gt;
&lt;h2&gt;Filtering out distractions&lt;/h2&gt;
&lt;p&gt;We made some changes to our proceedings for this event, entirely because last time with 'distractions' that caused some issues. In a nutshell, here is 50% of what we did:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A clear statement in the event description and follow up emails that this event was for developers and designers only.&lt;/li&gt;
&lt;li&gt;Laptops were an absolute requirement for entry into the event.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We also rolled in a couple other tricks I'm not going to write down. If you see me in person, ask away. The results were near perfect, and we won't hesitate to use these techniques again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sponsors"&gt;
&lt;h2&gt;Sponsors&lt;/h2&gt;
&lt;p&gt;We let attendees know which sponsors were interested in potential new hires, in this case, &lt;a class="reference external" href="http://originatelabs.com"&gt;Originate&lt;/a&gt; and &lt;a class="reference external" href="http://cars.com"&gt;Cars.com&lt;/a&gt;. This sort of low-key technique helps us land sponsors but doesn't annoy attendees. Speaking of sponsors, here they are in alphabetical order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://cars.com"&gt;Cars.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://cartwheelweb.com"&gt;Cartwheel Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://heroku.com"&gt;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://originatelabs.com"&gt;Originate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="code-projects-worked-on"&gt;
&lt;h2&gt;Code/Projects worked on&lt;/h2&gt;
&lt;p&gt;Next time I'm going to be a lot more careful about getting down the details of what people did. Maybe a signup sheet or an online form? Heck, sounds like a great quick project for next time!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; (see below for details)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tglines.github.com/dynasaur/"&gt;Dynasaur&lt;/a&gt; (Node.js/DynamoDB ORM)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/philfree/meteordraw"&gt;meteordraw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/harph/pyit"&gt;pyit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/symkat/DBIx-Config"&gt;DBIx::Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clojure Tutorials&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/andrewvc/engulf"&gt;engulf&lt;/a&gt; (Clojure load testing tool that got 2 more tests)&lt;/li&gt;
&lt;li&gt;HTML5&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Lots more!&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="django-sprints"&gt;
&lt;h2&gt;Django Sprints&lt;/h2&gt;
&lt;p&gt;My conservative estimate is that we had 12 people working on Django or Django related projects. That's at least 20% of attendees. Unfortunately, because I'm not a Django core developer, I wasn't reviewing commits; so I am not entirely sure what was being worked on. I do know that I wasn't the only person to commit to core Django.&lt;/p&gt;
&lt;p&gt;As for me, I continued my efforts started at DjangoCon Europe to refactor the &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/class-based-views/"&gt;Class&lt;/a&gt; &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/ref/class-based-views/"&gt;Based&lt;/a&gt; &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/ref/class-based-views/mixins/"&gt;Views&lt;/a&gt; documentation. I got in two pull requests and finally managed to badly teach myself how to use git rebase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: I want to make it exceedingly clear that I'm not the only one working the CBV doc refactor. I'm just one of the fold.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="socializing"&gt;
&lt;h2&gt;Socializing&lt;/h2&gt;
&lt;p&gt;During meals we tried to keep people's hands off the keyboard. Specifically everyone got a chance to state their name, toolset they were working with, and something interesting/embarrassing about themselves. Three of the more memorable ones:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An 8 year old attendee wrote his first 4 PHP programs!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://twitter.com/sym_kat"&gt;sym_kat&lt;/a&gt; is invited to speak at the next London Perl Workshop.&lt;/li&gt;
&lt;li&gt;Someone employed at SpaceX took Zed Shaw's &lt;a class="reference external" href="http://learnpythonthehardway.org/"&gt;LPTHW&lt;/a&gt; class taught by the man himself at &lt;a class="reference external" href="http://cartwheelweb.com"&gt;Cartwheel Web&lt;/a&gt; HQ in 2011 got himself moved from the C# to the Python team. Go open source!&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="closing-thoughts"&gt;
&lt;h2&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;There were a few glitches, but nothing major. Most of those glitches stem from us coming off two months of helping organize multiple events while traveling literally around the world. I think things would have been better if I had delegated more to the right people.&lt;/p&gt;
&lt;p&gt;For the most part, there was this electrifying energy that had people focused and working on what they wanted all day. Yet it wasn't all heads-down-coding, their was some good coder-to-coder discussion and fun. The result is at the end of the day people seemed refreshed and empowered, wanting another day as soon as possible. We hope to be able to catch this feeling at future events.&lt;/p&gt;
&lt;p&gt;Which means we're plotting the next event now. If you are interested in providing a venue or sponsoring the event, let me know at &lt;a class="reference external" href="mailto:pydanny&amp;#64;cartwheelweb.com"&gt;pydanny&amp;#64;cartwheelweb.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Corrected the details about the SpaceX guy.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="php"></category><category term="la"></category><category term="clojure"></category><category term="perl"></category><category term="ruby"></category><category term="nodejs"></category><category term="meteor"></category></entry><entry><title>Simple HTTP Basic Auth Wall</title><link href="http://pydanny.com/simple-http-basic-auth-wall.html" rel="alternate"></link><updated>2012-07-09T12:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/simple-http-basic-auth-wall.html</id><summary type="html">&lt;p&gt;I have a client who wanted their entire unlaunched public content site quickly but temporarily blocked for a short period of time. He wanted a universal password so he could send the site to reviewers, done quickly, and nothing else. In a few days the site will launch, and even if someone got through the authentication, nothing bad will happen except for an early visitor. So we determined this was a job for a very simple &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Basic_access_authentication"&gt;Basic access authentication&lt;/a&gt; implementation.&lt;/p&gt;
&lt;p&gt;I asked around and &lt;a class="reference external" href="http://jacobian.org/"&gt;Jacob Kaplan-Moss&lt;/a&gt; gave me this awesome snippet using &lt;a class="reference external" href="http://pypi.python.org/pypi/barrel"&gt;barrel&lt;/a&gt; that I pasted right into the bottom of the &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; 1.4-style application's &lt;tt class="docutils literal"&gt;wsgi.py&lt;/tt&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Add to the bottom of your wsgi.py file&lt;/span&gt;
&lt;span class="c"&gt;# Don&amp;#39;t forget to add barrel to your requirements!&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;barrel&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cooper&lt;/span&gt;

&lt;span class="n"&gt;REALM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PRIVATE&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;USERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cooper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicauth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;USERS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;realm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;REALM&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This took all of 5 minutes to implement and launch. The result is that the first time you visit the site the login prompt appears. If you enter 'spam' and 'eggs' then you can see the site fine.&lt;/p&gt;
&lt;p&gt;It worked and the customer was happy.&lt;/p&gt;
&lt;p&gt;Will this block a concerted penetration attempt? Of course not. If the site has/had critical or identifying information it would be implemented with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/HTTPS"&gt;HTTPS&lt;/a&gt;. Implementing a Django site with HTTPS is something I've done many times now, but this use case was 'do it fast, easy, and make it temporary'.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Moral of the story:&lt;/strong&gt; Pay attention to your requirements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; As this is just adding in some WSGI middleware, this should work without much modification in Flask, Pyramid, and other WSGI compliant web frameworks.&lt;/p&gt;
</summary><category term="python"></category><category term="django"></category><category term="wsgi"></category><category term="howto"></category></entry><entry><title>PyCon Philippines 2012 Day 2</title><link href="http://pydanny.com/pycon-philippines-2012-day-2.html" rel="alternate"></link><updated>2012-07-05T12:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/pycon-philippines-2012-day-2.html</id><summary type="html">&lt;p&gt;The second day of &lt;a class="reference external" href="http://ph.pycon.org"&gt;PyCon Philippines 2012&lt;/a&gt; had a really good turnout. My unofficial estimate is that we had about 90% of the attendees from the first day attend (with the unfortunate exception of most of the faculty and students of &lt;a class="reference external" href="http://www.13hq.com/"&gt;Agoo Computer College&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The day started with...&lt;/p&gt;
&lt;div class="section" id="lightning-talks"&gt;
&lt;h2&gt;Lightning Talks&lt;/h2&gt;
&lt;p&gt;Unfortunately I don't normally take notes on lightning talks. I'm kicking myself now. &lt;strong&gt;Really hard.&lt;/strong&gt; I'll try and relate some of the talks:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Import this and &lt;a class="reference external" href="http://pypi.python.org/pypi/that"&gt;that&lt;/a&gt;, a parody talk by Daniel Greenfeld (me). &lt;a class="reference external" href="https://twitter.com/malcolmt/status/219244338029412352"&gt;Malcolm comment on it.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Getting into space using weather balloons by Frank Pohlmann&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/audreyr/ponystrap"&gt;Ponystrap&lt;/a&gt; by &lt;a class="reference external" href="http://audreymroy.com"&gt;Audrey Roy&lt;/a&gt; (&lt;a class="reference external" href="http://klewel.com/conferences/djangocon-2012/index.php?talkID=31"&gt;video from DjangoCon Europe&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Call for &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Tagalog"&gt;Tagalog&lt;/a&gt; and other &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Philippine_languages"&gt;Philippine languages&lt;/a&gt; translation of &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; by Malcolm Tredinnick&lt;/li&gt;
&lt;li&gt;The obligatory PyCon lighting talk on Vim by &lt;a class="reference external" href="https://twitter.com/bry_bibat"&gt;Bryan Bibat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://openerp.com/"&gt;OpenERP&lt;/a&gt; by &lt;a class="reference external" href="https://twitter.com/PliniusSecundus"&gt;Frank&lt;/a&gt; &lt;a class="reference external" href="http://www.auberonsolutions.com/"&gt;Pohlmann&lt;/a&gt; and &lt;a class="reference external" href="http://www.linkedin.com/pub/ann-tan-pohlmann/4/a30/233"&gt;Ann Tan-Pohlmann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A parody talk by &lt;a class="reference external" href="https://twitter.com/mrvaldez"&gt;Sony Valdez&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then it was on to...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sprints-and-tutorials"&gt;
&lt;h2&gt;Sprints and Tutorials&lt;/h2&gt;
&lt;blockquote class="epigraph"&gt;
&lt;p&gt;Encouraged at #pyconph seeing so many people declaring themselves beginners and then diving in. Enthusiasm was a bit contagious.&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;&lt;a class="reference external" href="https://twitter.com/malcolmt"&gt;Malcolm Tredinnick&lt;/a&gt; on &lt;a class="reference external" href="https://twitter.com/malcolmt/status/219425413301157889"&gt;twitter&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Primary funding for the sprints came from the &lt;a class="reference external" href="https://www.djangoproject.com/foundation"&gt;Django Software Foundation&lt;/a&gt; and &lt;a class="reference external" href="http://pythonsprints.com/"&gt;Python Sprints&lt;/a&gt;. That funding went towards food, drinks, and various logistics for handling the estimated 200+ attendee turnout.  Things sprinted on:&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;Django&lt;/h3&gt;
&lt;p&gt;Django had it's own dedicated and very full room (no more chairs could fit so I sat on the floor), with Malcolm Tredinnick leading the effort, with &lt;a class="reference external" href="http://marconijr.com/"&gt;Marconi&lt;/a&gt; &lt;a class="reference external" href="https://twitter.com/marconimjr"&gt;Moreto&lt;/a&gt; helping out. It turned into mostly an effort to get a lot of people kick-started in Django. What was very heartening was watching people race through the tutorials on their own, and then work on projects using the framework.&lt;/p&gt;
&lt;p&gt;I suspect next year the sprints will see a lot of submissions to Django core.&lt;/p&gt;
&lt;p&gt;I had hoped to continue my work on Class Based View documentation, but it was wisely pointed out that I should focus more on helping others get moving in Django and other projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ansible"&gt;
&lt;h3&gt;Ansible&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://capsunlock.net"&gt;Rodney&lt;/a&gt; &lt;a class="reference external" href="https://github.com/cocoy"&gt;Quillo&lt;/a&gt; led the sprint on the &lt;a class="reference external" href="http://ansible.github.com/"&gt;Ansible&lt;/a&gt; tool of which he is so fond. About seven people fond of engineering joined him. They seemed very productive and happy by day's end.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pymongo"&gt;
&lt;h3&gt;pymongo&lt;/h3&gt;
&lt;p&gt;A number of developers working on embedded devices gathered to work out an edge case issue with pymongo. I wish I knew more about their efforts, but I can tell you that this sort of very serious engineering effort is very common amongst professional Filipino developers. Because of geography, telecommunications and embedded devices are much more prevalent in the island nation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-efforts"&gt;
&lt;h3&gt;Other efforts&lt;/h3&gt;
&lt;p&gt;Again I'm kicking myself. There were a ton of other development going on and I didn't document any of it. Certainly I was busy here and there helping out, but this is the sort of thing you need to document at the moment. Next time I assure you I will be very diligent about recording the efforts of so many.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tutorial-room"&gt;
&lt;h3&gt;Tutorial Room&lt;/h3&gt;
&lt;p&gt;About half the people stayed in what I dubbed the tutorial room. This is where speakers took turns going over material we had brought to the conference. Attendees followed along, and the diligence and focus in the room was very impressive. The tutorials/talks included:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Intro to Python using Turtle by Sony Valdez&lt;/li&gt;
&lt;li&gt;Introduction to git and github by Bryan Bibat&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.slideshare.net/pydanny/intro-to-python-11186202"&gt;21 Cool Things You Can Do With Python&lt;/a&gt; by Daniel Greenfeld (me)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="food-and-drinks"&gt;
&lt;h2&gt;Food and drinks&lt;/h2&gt;
&lt;p&gt;I mean to mention that the breakfast, lunch, and snacks at PyCon Philippines 2012 were pretty good. The logistic chairs had decided rather than gamble on the usual sort of over-priced and not-so-good professional catering service that most conferences rely on to the dismay of... well... everyone, to go with local restaurants.&lt;/p&gt;
&lt;p&gt;For dinner people went out on their own. We were lucky enough to go to Pino in Quezon City both times. The Kare-Kareng Bagnet was really tasty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conference-end"&gt;
&lt;h2&gt;Conference End&lt;/h2&gt;
&lt;p&gt;The conference chair, Frank Pohlmann, gave us a few well spoken words about how wonderful the event was to run and host. How gratifying it was to see the enthusiasm and dedication of the attendees, and how inspired he felt.&lt;/p&gt;
&lt;p&gt;Then we cheered him.&lt;/p&gt;
&lt;p&gt;After that it was a lot of pictures and goodbyes to many new friends. Which meant a lot of sad feelings about a great event coming to an end. I felt inspired and changed. I wasn't the same person going in as I was coming out. I'm more grateful for what I have, and deeply honored that I had this chance to bring PyCon to so many wonderful people.&lt;/p&gt;
&lt;p&gt;More thoughts on PyCon Philippines in a forthcoming blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coming-soon"&gt;
&lt;h2&gt;Coming soon&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Story of PyCon Philippines&lt;/li&gt;
&lt;/ul&gt;
&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/pydanny/7516869028/"&gt;&lt;img alt="http://farm8.staticflickr.com/7135/7516869028_ff24aaa027_z.jpg" class="align-left" id="standing-room-only" src="http://farm8.staticflickr.com/7135/7516869028_ff24aaa027_z.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="philippines"></category><category term="pycon"></category></entry><entry><title>PyCon Philippines 2012 Day 1</title><link href="http://pydanny.com/pycon-philippines-2012-day-1.html" rel="alternate"></link><updated>2012-07-03T12:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/pycon-philippines-2012-day-1.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://ph.pycon.org"&gt;PyCon Philippines 2012&lt;/a&gt; (PyCon PH) happened just this past weekend at the &lt;a class="reference external" href="http://www.upd.edu.ph/"&gt;University of the Philippines Diliman&lt;/a&gt; (UP Diliman) campus in &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Quezon_City"&gt;Quezon City&lt;/a&gt;, which is part of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Metro_Manila"&gt;Metro Manila&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I can assure you that PyCon PH was an wonderful, amazing, humbling experience. I'm hoping that this post and others will get across to you why.&lt;/p&gt;
&lt;div class="section" id="arrival"&gt;
&lt;h2&gt;Arrival&lt;/h2&gt;
&lt;p&gt;Frank Pohlmann, chairman of PyCon Philippines picked us up and drove us to the event. He had worked day and night getting the event ready, all the while running his company, working a job, and being a father to his lovely 21 month old daughter.&lt;/p&gt;
&lt;p&gt;As we arrived at the venue, Audrey and I were met by our good friend, Filipino-American Bryan Veloso of Github, who was to provide the closing keynote. As soon as Bryan heard that there was going to be a PyCon in the Philippines he gave up his trip to Europython to be a speaker at PyCon PH.&lt;/p&gt;
&lt;p&gt;Inside the Institute of Electrical and Electronics Engineering, we were greeted Ann Tan-Pohlman, logistics co-chair and volunteer organizer. She had over a dozen volunteers getting ready for the oncoming flood of registrants.&lt;/p&gt;
&lt;p&gt;More on the herculean efforts of the organizers and volunteers of this event in a forthcoming blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inspiration"&gt;
&lt;h2&gt;Inspiration&lt;/h2&gt;
&lt;p&gt;We noticed a large group gather by a side corridor and went to say hello. There we met &lt;a class="reference external" href="https://twitter.com/mrvaldez"&gt;Sony Valdez&lt;/a&gt;, President of &lt;a class="reference external" href="http://www.13hq.com/"&gt;Agoo Computer College&lt;/a&gt;, and forty of his faculty and students. They were buzzing with energy and excitement, belying the fact that they had left at midnight the night before in order to arrive on time (they traveled many hours by bus). Audrey, Bryan, and I were floored by their effort to educate themselves, and were determined in our speeches not to disappoint.&lt;/p&gt;
&lt;p&gt;Unfortunately, the majority of the Agoo Computer Science had to go in the middle of the afternoon. &lt;strong&gt;We didn't know they had to go until it was time to leave&lt;/strong&gt;. Next year I plan to do whatever is possible to help them come for the duration of the conference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pycon-begins"&gt;
&lt;h2&gt;PyCon Begins&lt;/h2&gt;
&lt;p&gt;After the national anthem, the Dean of Computer Science, Adrian Roy Valdez, started the event with a few words. Frank Pohlmann, PyCon PH chair thanked everyone involved including the sponsors, speakers, and especially the attendees. I gave a keynote speech I'll blog about shortly, and then it was time for the talks.&lt;/p&gt;
&lt;div class="section" id="intro-to-python-1"&gt;
&lt;h3&gt;Intro to Python &lt;a class="footnote-reference" href="#id10" id="id1"&gt;[1]&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;by &lt;a class="reference external" href="http://twitter.com/titopao"&gt;Paolo Barazon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paulo gave the Intro to Python talk. He was burdened by some equipment issues, but kept going undeterred. It reminded me of the first time I spoke at PyCon 2010, when for the first 10 minutes of my talk they couldn't get the projector to work. In any case, Paolo did a great job under very trying conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-tricks-you-can-t-live-without-2"&gt;
&lt;h3&gt;Python Tricks you can't live without &lt;a class="footnote-reference" href="#id11" id="id2"&gt;[2]&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By &lt;a class="reference external" href="http://audreymroy.com"&gt;Audrey Roy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Audrey summarized a lot of the really important things you need to know in Python but aren't part of an introductory talk. Things like pip and virtualenv, how to construct packages, basic use of PyPI, and hammered home the need for good documentation. I may be partial, but I think this was the best version of this kind of talk ever given. :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-quickstart-3"&gt;
&lt;h3&gt;Django Quickstart &lt;a class="footnote-reference" href="#id12" id="id3"&gt;[3]&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By &lt;a class="reference external" href="http://marconijr.com/"&gt;Marconi&lt;/a&gt; &lt;a class="reference external" href="https://twitter.com/marconimjr"&gt;Moreto&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Marconi built off what Audrey provided, and added to it by giving a good introduction to Django. He also contributed a lot during the sprints the next day by pitching in with beginners. His talk featured code for a simple TODO app, and you can see the working example at &lt;a class="reference external" href="http://quickstart.marconijr.com/"&gt;http://quickstart.marconijr.com/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="game-programming-with-python-4"&gt;
&lt;h3&gt;Game Programming with Python  &lt;a class="footnote-reference" href="#id13" id="id4"&gt;[4]&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote class="epigraph"&gt;
&lt;p&gt;Are you afraid of math? Too bad! In this tutorial you will learn how to math! Scary, isn't it?&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Sony Valdez&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sony Valdez, who I mentioned earlier, gave a talk on pygame and math while wearing the Barong Talalog. Not just any talk on pygame, but the best one I've ever seen. He's a natural speaker and educator, and extremely funny. And while giving this amazing talk on no sleep (remember - he was on a bus with 40 of his students and faculty), he broke many classic presenter rules:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Live code demo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;He wrote a functioning game while giving this talk. He made his mistakes part of the talk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Used notepad&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That's right. He didn't use Vim, Emacs, Sublime Text, or PyCharm. He used notepad.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Someone else's laptop&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;He used an unfamiliar computer for his talk. Ever try and type on a keyboard you aren't familiar with? This is what he was dealing with while after a 5+ hour bus journey with probably no sleep the night before.&lt;/p&gt;
&lt;p&gt;I'm in awe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functional-programming-in-python-5"&gt;
&lt;h3&gt;Functional Programming in Python  &lt;a class="footnote-reference" href="#id14" id="id5"&gt;[5]&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;by &lt;a class="reference external" href="https://twitter.com/malcolmt"&gt;Malcolm Tredinnick&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sony was a hard act to follow, but Malcolm gave an amazing rendition of his classic talk on functional programming. I've seen Malcolm give this talk before, but this instance was clearly the best.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ansible-6"&gt;
&lt;h3&gt;Ansible &lt;a class="footnote-reference" href="#id15" id="id6"&gt;[6]&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;by &lt;a class="reference external" href="http://capsunlock.net"&gt;Rodney&lt;/a&gt; &lt;a class="reference external" href="https://github.com/cocoy"&gt;Quillo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What's a python conference without one talk about system engineering? Fortunately for us, Rodney gave a talk on &lt;a class="reference external" href="http://ansible.github.com/"&gt;Ansible&lt;/a&gt;, a pretty new Python based deployment tool. What makes Ansible different is it's range of options, and simplicity of use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-didn-t-know-it-s-python-python-advocacy-7"&gt;
&lt;h3&gt;I didn't know it's Python: Python Advocacy &lt;a class="footnote-reference" href="#id16" id="id7"&gt;[7]&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote class="epigraph"&gt;
&lt;p&gt;&amp;quot;PyCon: More fun in the Philippines&amp;quot;&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Variant of the &lt;a class="reference external" href="http://www.itsmorefuninthephilippines.com/"&gt;Philippines Department of Tourism slogan&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Paulo Barazon returned to talk about the big users of Python, how to promote it's use, and why it's so awesome for... well.. lots of things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="maps-of-imaginary-lands-8"&gt;
&lt;h3&gt;Maps of Imaginary Lands &lt;a class="footnote-reference" href="#id17" id="id8"&gt;[8]&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Malcom came back to give us a talk on how to assemble the components necessary to do a mashup of an imaginary place he cooked up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="closing-keynote-design-your-open-source-project-9"&gt;
&lt;h3&gt;Closing Keynote: Design your open source project &lt;a class="footnote-reference" href="#id18" id="id9"&gt;[9]&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;by &lt;a class="reference external" href="https://twitter.com/bryanveloso"&gt;Bryan&lt;/a&gt; &lt;a class="reference external" href="http://avalonstar.com/"&gt;Veloso&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bryan closed out the day with an inspirational and funny keynote speech instructing beginners on how to make your project used and loved by developers. His slides were incredible, &lt;a class="reference external" href="https://speakerdeck.com/u/bryan/p/design-your-own-open-source-project"&gt;as you should see for yourself&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="coming-soon"&gt;
&lt;h2&gt;Coming soon&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Day 2 of PyCon Philippines&lt;/li&gt;
&lt;li&gt;The Story of PyCon Philippines&lt;/li&gt;
&lt;li&gt;More...&lt;/li&gt;
&lt;/ul&gt;
&lt;a class="reference external image-reference" href="http://ph.pycon.org"&gt;&lt;img alt="http://ph.pycon.org/images/phpug.png" class="align-left" id="pycon-philippines-logo" src="http://ph.pycon.org/images/phpug.png" /&gt;&lt;/a&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/basic_python.html"&gt;http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/basic_python.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/python_tricks.html"&gt;http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/python_tricks.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/django_quickstart.html"&gt;http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/django_quickstart.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/game_programming.html"&gt;http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/game_programming.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/functional_programming.html"&gt;http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/functional_programming.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/ansible.html"&gt;http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/ansible.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/python_advocacy.html"&gt;http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/python_advocacy.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id17" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/closing-keynote.html"&gt;http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/closing-keynote.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id18" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[9]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/closing-keynote.html"&gt;http://pydanny-event-notes.readthedocs.org/en/latest/PyconPH2012/closing-keynote.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="philippines"></category><category term="pycon"></category></entry><entry><title>Announcing PyCon Philippines!</title><link href="http://pydanny.com/announcing-pycon-philippines.html" rel="alternate"></link><updated>2012-06-09T12:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/announcing-pycon-philippines.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://ph.pycon.org"&gt;PyCon Philippines 2012&lt;/a&gt;, set to occur on &lt;strong&gt;June 30&lt;/strong&gt; and &lt;strong&gt;July 1&lt;/strong&gt;, is the first Python programming conference held in the Philippines. PyCon is a volunteer run effort that brings together Python developers from a variety of backgrounds and skill levels into a friendly, cooperative environment in order to educate, inspire, and work together - building relationships that transcend the event and can turn into lifelong friendships or even very impressive business alliances.&lt;/p&gt;
&lt;p&gt;This event is possible due to the hard work and contributions of members of the Manila Python users group, the support of the Python Software Foundation, various members of the Python community, our gracious sponsors, and many others.&lt;/p&gt;
&lt;p&gt;I'll be there, along with &lt;a class="reference external" href="http://audreymroy.com"&gt;Audrey Roy&lt;/a&gt; and Django core developer &lt;a class="reference external" href="https://twitter.com/malcolmt"&gt;Malcolm Tredinnick&lt;/a&gt;. Hope to see you there!&lt;/p&gt;
&lt;div class="section" id="what-is-python"&gt;
&lt;h2&gt;What is Python?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; is an open source programming language used for science, engineering, robotics, entertainment, web development, and more. It is used by organizations such as Google, NASA, Instagram, Pinterest, Mozilla, Walt Disney Animation Studios, WETA Digital, and many more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interested-in-attending"&gt;
&lt;h2&gt;Interested in attending?&lt;/h2&gt;
&lt;p&gt;Then head to the &lt;a class="reference external" href="http://ph.pycon.org/register.html"&gt;registration page&lt;/a&gt;. The early bird discount ends on June 15th, so buy your tickets now!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interested-in-sponsoring"&gt;
&lt;h2&gt;Interested in sponsoring?&lt;/h2&gt;
&lt;p&gt;Please go to the &lt;a class="reference external" href="http://ph.pycon.org/sponsor.html"&gt;sponsorship page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your sponsorship would go a long way towards making PyCon Philippines 2012 a memorable event. As this is an entirely volunteer-run event, 100% of funds go toward actual event costs: food, drinks, chairs, tables, signage, nametags, flyers, advertising, etc. Per custom with PyCons around the world, the organizers receive no payment for their efforts, and any funds left over will be either placed in a Philippine based non-profit corporation or donated back to the Python Software Foundation.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ph.pycon.org"&gt;&lt;img alt="http://ph.pycon.org/images/phpug.png" class="align-center" id="pycon-philippines-logo" src="http://ph.pycon.org/images/phpug.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="philippines"></category><category term="pycon"></category></entry><entry><title>Django Class Based View: email form with CAPTCHA</title><link href="http://pydanny.com/django-class-based-view-email-form-with-captcha.html" rel="alternate"></link><updated>2012-05-23T09:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/django-class-based-view-email-form-with-captcha.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://pydanny.com/simple-django-email-form-using-cbv.html"&gt;Yesterday I showed how to implement a simple email form&lt;/a&gt; for &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; using Class Based Views. Today I'm going to extend yesterday's work to use the excellent &lt;a class="reference external" href="http://www.google.com/recaptcha"&gt;RECAPTCHA&lt;/a&gt; service to help reduce spam content.&lt;/p&gt;
&lt;p&gt;This version requires &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; installing the following into your &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;django-crispy-forms&lt;/span&gt;&lt;/tt&gt; so we can do Python driven layouts.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;django-floppyforms&lt;/span&gt;&lt;/tt&gt; so we get HTML5 elements for free.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;django-recaptcha&lt;/span&gt;&lt;/tt&gt; to do the RECAPTCHA work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don't forget to add the app to your INSTALLED_APPS in settings.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;crispy_forms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;floppyforms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;captcha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generate your KEYs from the RECAPTCHA site and add them in settings.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;RECAPTCHA_PUBLIC_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;6LcVu9ESAAAAANVWwbM5-PLuLES94GQ2bIYmSNTG&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;RECAPTCHA_PRIVATE_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;6LcVu9ESAAAAAGxz7aEIACWRa3CVnXN3mFd-cajP&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In myapp.forms.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;captcha.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ReCaptchaField&lt;/span&gt;  &lt;span class="c"&gt;# Only import different from yesterday&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;crispy_forms.helper&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FormHelper&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;crispy_forms.layout&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Submit&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;floppyforms&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;forms&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContactForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmailField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Textarea&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;captcha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ReCaptchaField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c"&gt;# Only field different from yesterday&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;helper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FormHelper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContactForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In myapp.views.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Unchanged from yesterday. :-)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;send_mail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FormView&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ContactForm&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContactFormView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FormView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContactForm&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;myapp/email_form.html&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/email-sent/&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{name} / {email} said: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;{0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;from_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;contact-form@myapp.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;recipient_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LIST_OF_EMAIL_RECIPIENTS&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContactFormView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In templates/myapp/email_form.html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{# Also unchanged from yesterday. :-)  #}
{% extends &amp;#39;base.html&amp;#39; %}
{% load crispy_forms_tags %}

{% block title %}Send an email{% endblock %}

{% block content %}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;span6&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Send an email&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            {% crispy form form.helper %}
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{% endblock %}

{% block extrajs %}
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ STATIC_URL }}js/jquery-1.7.1.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#id_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="what-i-did"&gt;
&lt;h2&gt;What I did&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; I installed three packages into my Python environment.&lt;/li&gt;
&lt;li&gt;Added those three packages into the INSTALLED_APPS setting.&lt;/li&gt;
&lt;li&gt;Set the RECAPTCHA keys for my site.&lt;/li&gt;
&lt;li&gt;Modified the &lt;tt class="docutils literal"&gt;forms.py&lt;/tt&gt; file from yesterday to include the RECAPTCHA field.&lt;/li&gt;
&lt;li&gt;Reduced spam content.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-i-could-do"&gt;
&lt;h2&gt;What I could do&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pin the app versions for a particular release. This is what you should be doing in normal development and in production, but for a blog entry I'm avoiding it because release numbers become quickly dated.&lt;/li&gt;
&lt;li&gt;Rather than change the &lt;tt class="docutils literal"&gt;ContactForm&lt;/tt&gt; from yesterday, I could have extended it via inheritance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-learn-more"&gt;
&lt;h2&gt;Want to learn more?&lt;/h2&gt;
&lt;p&gt;If you live in the Los Angeles area and want to learn more about Django, everything from the basics to setting up a Content Management System or E-Commerce system, check out our Django (and &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt;) training at &lt;a class="reference external" href="https://academy.cartwheelweb.com"&gt;Cartwheel Academy&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="howto"></category><category term="django-CBVs"></category></entry><entry><title>Simple Django email form using CBV</title><link href="http://pydanny.com/simple-django-email-form-using-cbv.html" rel="alternate"></link><updated>2012-05-22T09:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/simple-django-email-form-using-cbv.html</id><summary type="html">&lt;p&gt;Here's a simple &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt; Class Based Views for &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt;. Here is a sample of how to do one as a simple email form. There is no CAPTCHA in this example, that's the topic of a future blog post.&lt;/p&gt;
&lt;p&gt;This version requires the following packages &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; installed into your &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-crispy-forms&lt;/span&gt;&lt;/tt&gt; so we can do Python driven layouts.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-floppyforms&lt;/span&gt;&lt;/tt&gt; so we get HTML5 elements for free.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They also need to be added to your list of INSTALLED_APPS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;crispy_forms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;floppyforms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In myapp.forms.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;crispy_forms.helper&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FormHelper&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;crispy_forms.layout&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Submit&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;floppyforms&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;forms&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContactForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmailField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Textarea&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;helper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FormHelper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContactForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In myapp.views.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;send_mail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FormView&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ContactForm&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContactFormView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FormView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContactForm&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;myapp/email_form.html&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/email-sent/&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{name} / {email} said: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;{0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;from_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;contact-form@myapp.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;recipient_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LIST_OF_EMAIL_RECIPIENTS&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContactFormView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In templates/myapp/email_form.html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{% extends &amp;#39;base.html&amp;#39; %}
{% load crispy_forms_tags %}

{% block title %}Send an email{% endblock %}

{% block content %}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;span6&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Send an email&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            {% crispy form form.helper %}
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{% endblock %}

{% block extrajs %}
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ STATIC_URL }}js/jquery-1.7.1.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#id_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="tomorrow-s-blog-post"&gt;
&lt;h2&gt;Tomorrow's blog post&lt;/h2&gt;
&lt;p&gt;In tomorrow's post I'll show how to add CAPTCHA into your project to help reduce spam messages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-learn-more"&gt;
&lt;h2&gt;Want to learn more?&lt;/h2&gt;
&lt;p&gt;If you live in the Los Angeles area and want to learn more about Django, everything from the basics to setting up a Content Management System or E-Commerce system, check out our Django (and &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt;) training at &lt;a class="reference external" href="https://academy.cartwheelweb.com"&gt;Cartwheel Academy&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="howto"></category><category term="django-CBVs"></category></entry><entry><title>May 12th, 2012 LA Open Source Recap</title><link href="http://pydanny.com/may-12th-2012-la-open-source-recap.html" rel="alternate"></link><updated>2012-05-21T09:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/may-12th-2012-la-open-source-recap.html</id><summary type="html">&lt;p&gt;On May 12th, 2012, over 50 &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt;, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/C%2B%2B"&gt;C++&lt;/a&gt;, &lt;a class="reference external" href="http://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;, &lt;a class="reference external" href="http://www.php.net/"&gt;PHP&lt;/a&gt;, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/JavaScript"&gt;JavaScript&lt;/a&gt;, and &lt;a class="reference external" href="http://nodejs.org/"&gt;Node.js&lt;/a&gt; developers arrived to code on a variety of projects. It was awesome! Tons of open source projects saw contributions, and people across languages and frameworks worked together.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/59834630&amp;#64;N07/7193954598/"&gt;&lt;img alt="http://farm9.staticflickr.com/8007/7193954598_1b071cb5e4.jpg" class="align-center" id="may-12-open-source-sprint" src="http://farm9.staticflickr.com/8007/7193954598_1b071cb5e4.jpg" /&gt;&lt;/a&gt;
&lt;div class="section" id="event-background"&gt;
&lt;h2&gt;Event Background&lt;/h2&gt;
&lt;p&gt;Less then two weeks before May 12, a bunch of us Los Angeles area Python developers were hanging out and wishing we had a local sprint to attend that was just about developers working on open source projects. It was then that &lt;a class="reference external" href="http://audreymroy.com"&gt;Audrey Roy&lt;/a&gt; and I, along with an army of hardworking volunteers, decided to stop wishing and make it happen on May 12th.&lt;/p&gt;
&lt;p&gt;We lined up a venue, contacted awesome sponsors &lt;a class="reference external" href="http://spire.io"&gt;Spire.io&lt;/a&gt;, &lt;a class="reference external" href="http://heroku.com"&gt;Heroku&lt;/a&gt;, &lt;a class="reference external" href="https://github.com"&gt;Github&lt;/a&gt;, &lt;a class="reference external" href="http://cars.com"&gt;Cars.com&lt;/a&gt;, and &lt;a class="reference external" href="https://academy.cartwheelweb.com"&gt;Cartwheel Academy&lt;/a&gt;. As we did that, we also invited people from the many Los Angeles programming communities in Los Angeles to join us. The result of everyone's hard work? &lt;strong&gt;We filled up all sixty spots in less than 96 hours!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some of the projects worked on included:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Salt Stack: &lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;https://github.com/saltstack/salt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A node.js-powered streaming terminal, allowing for shared input at a terminal among several participants.&lt;/li&gt;
&lt;li&gt;A JavaScript powered astrolabe.&lt;/li&gt;
&lt;li&gt;Settlers of Catan analytics in JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.openframeworks.cc/"&gt;OpenFrameworks&lt;/a&gt;, a cross-platform toolkit for creative coding in C++.&lt;/li&gt;
&lt;li&gt;My own time at the sprint was spent with Audrey Roy and &lt;a class="reference external" href="http://rdegges.com"&gt;Randall Degges&lt;/a&gt; on engineering cleanup and fixing bugs on &lt;a class="reference external" href="https://github.com/opencomparison/opencomparison"&gt;OpenComparison&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="more-open-source-sprinting-on-july-15"&gt;
&lt;h2&gt;More open source sprinting on July 15&lt;/h2&gt;
&lt;p&gt;There's going to be another Los Angeles open source event on July 15 at &lt;a class="reference external" href="http://originate.com/"&gt;Originate&lt;/a&gt;. Instead of less then two weeks to plan, we have nearly two months - so it's going to be better!&lt;/p&gt;
&lt;p&gt;RSVP here: &lt;a class="reference external" href="http://www.meetup.com/LA-Hackathons/events/64542582/"&gt;http://www.meetup.com/LA-Hackathons/events/64542582/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to sponsor or volunteer, email me at pydanny (at) cartwheelweb.com or audreyr (at) cartwheelweb.com. We go out of our way to ensure that sponsors and volunteers feel appreciated.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/59834630&amp;#64;N07/7193961164/"&gt;&lt;img alt="http://farm9.staticflickr.com/8003/7193961164_b26d27093d.jpg" class="align-center" id="me-and-audrey-at-the-open-source-sprint" src="http://farm9.staticflickr.com/8003/7193961164_b26d27093d.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="los-angeles"></category><category term="lahackathons"></category></entry><entry><title>10 reasons to go to DjangoCon Europe</title><link href="http://pydanny.com/10-reasons-to-go-to-djangocon-europe.html" rel="alternate"></link><updated>2012-05-14T19:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/10-reasons-to-go-to-djangocon-europe.html</id><summary type="html">&lt;p&gt;You should go to &lt;a class="reference external" href="http://djangocon.eu"&gt;DjangoCon Europe&lt;/a&gt; in lovely &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zurich"&gt;Zurich&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Switzerland"&gt;Switzerland&lt;/a&gt;. Here are 10 reasons why:&lt;/p&gt;
&lt;div class="section" id="chocolate"&gt;
&lt;h2&gt;1. &lt;strong&gt;Chocolate&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;So much of what we like about chocolate comes from Switzerland. For example, Milk Chocolate was invented in Switzerland.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="keynote-speaker-jacob-kaplan-moss"&gt;
&lt;h2&gt;2. &lt;strong&gt;Keynote speaker: Jacob Kaplan-Moss&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Always a great speaker and fun to be around, he's one of the BDFL's of &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cheese"&gt;
&lt;h2&gt;3. &lt;strong&gt;Cheese&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I grew up thinking that Swiss Cheese was just about holes. It's so much more. I can't wait to try fresh European cheese made by master craftsmen from the freshest ingredients.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="keynote-speaker-jessica-mckellar"&gt;
&lt;h2&gt;4. &lt;strong&gt;Keynote speaker: Jessica McKellar&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In a word, Jessica is &lt;strong&gt;incredible&lt;/strong&gt;. She's a Twisted core developer, PSF board member, part of the trio responsible for the gigantic Boston Python User Group's massive size explosion, and a talented speaker. She's used her incredible talents and skills to increase diversity in the community and generally help other people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="breakfast"&gt;
&lt;h2&gt;5. &lt;strong&gt;Breakfast&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Muesli was invented in Switzerland. I love Muesli. I was floored by how much better it was in New Zealand. I can't wait to try it in it's homeland.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web-site"&gt;
&lt;h2&gt;6. &lt;strong&gt;Web Site&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The DjangoCon Europe site is crazy. I mean, look at all those animations!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talks"&gt;
&lt;h2&gt;7. &lt;strong&gt;Talks&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This is a single track event with proven speakers like Zachary Voase and Andrew Godwin, yet balances that with bringing in new blood to spice things up. And dare I say &lt;a class="reference external" href="http://2012.djangocon.eu/schedule/round-pegs-and-square-holes/"&gt;I'm giving a technical talk&lt;/a&gt; with &lt;a class="reference external" href="http://audreymroy.com/"&gt;Audrey Roy&lt;/a&gt;? ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mountains"&gt;
&lt;h2&gt;8. &lt;strong&gt;Mountains&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;With all the incredible food, you would think you would gain umpteen kilograms. Fortunately there are mountains all around to climb and hike.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sprints"&gt;
&lt;h2&gt;9. &lt;strong&gt;Sprints&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Want to sprint on Django itself? Look no further because there will be Django core developers around! There will also be notable &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; developers like &lt;a class="reference external" href="http://kennethreitz.com/"&gt;Kenneth Reitz&lt;/a&gt; and others around working hard on a lot of different projects. It's going to intense and fun!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="castles"&gt;
&lt;h2&gt;10. &lt;strong&gt;Castles&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Living in the USA, we just don't have anything like castles. DjangoCon Europe will be near a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_castles_and_fortresses_in_Switzerland#Zurich"&gt;small horde of stone fortifications&lt;/a&gt;. Which means if the Zombie Apocalypse happens during the conference, we'll have many secure places to go. They also make lovely tourist destinations. :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-you-waiting-for"&gt;
&lt;h2&gt;What are you waiting for?&lt;/h2&gt;
&lt;p&gt;DjangoCon Europe has a cap on attendance. Tickets for Python events have been selling out, not just for PyCon US. Don't miss out!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-all-about-me"&gt;
&lt;h2&gt;It's all about me&lt;/h2&gt;
&lt;p&gt;Yup.&lt;/p&gt;
&lt;p&gt;Call me selfish but I want you there because I haven't haven't met all our European friends yet in person. Hope to see you next month in Zurich!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="europe"></category><category term="djangocon"></category></entry><entry><title>CSS Hacking to make my code samples legible</title><link href="http://pydanny.com/css-hacking-to-make-my-code-samples-legible.html" rel="alternate"></link><updated>2012-05-11T08:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/css-hacking-to-make-my-code-samples-legible.html</id><summary type="html">&lt;p&gt;I've been very happy with &lt;a class="reference external" href="http://pelican.readthedocs.org/"&gt;Pelican&lt;/a&gt; as a blog engine so far, and haven't even moved off the sample theme. There's just been one problem: Myself and others have had a lot of trouble reading the code snippets.&lt;/p&gt;
&lt;p&gt;I didn't have time to cook up a full Pelican theme, so instead I just hacked the local CSS files. The problem with this hack is that every time I regenerate the blog I have to copy the right CSS files into place. So next week when I have time I'll do a proper Pelican theme.&lt;/p&gt;
&lt;p&gt;In the meantime, enjoy!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;shuffle&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;food_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Beef&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Fish&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Vegetarian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Chicken&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;food_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="css"></category><category term="usability"></category></entry><entry><title>Choosing an API framework for Django</title><link href="http://pydanny.com/choosing-an-api-framework-for-django.html" rel="alternate"></link><updated>2012-05-10T08:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/choosing-an-api-framework-for-django.html</id><summary type="html">&lt;p&gt;First off, out of the box, &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; lets you construct API responses with a little work. All you need to do is something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Copied from https://docs.djangoproject.com/en/1.4/topics/class-based-views/#more-than-just-html&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;simplejson&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JSONResponseMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;Returns a JSON response containing &amp;#39;context&amp;#39; as payload&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert_context_to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_json_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;httpresponse_kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;Construct an `HttpResponse` object.&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;httpresponse_kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_context_to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;Convert the context dictionary into a JSON object&amp;quot;&lt;/span&gt;
        &lt;span class="c"&gt;# Note: This is *EXTREMELY* naive; in reality, you&amp;#39;ll need&lt;/span&gt;
        &lt;span class="c"&gt;# to do much more complex handling to ensure that arbitrary&lt;/span&gt;
        &lt;span class="c"&gt;# objects -- such as Django model instances or querysets&lt;/span&gt;
        &lt;span class="c"&gt;# -- can be serialized as JSON.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you get that &lt;cite&gt;mixin&lt;/cite&gt;, use it in your views like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# modified from djangoproject.com sample code&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;simplejson&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JSONDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSONResponseMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyCustomUserView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_context_to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;objects&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;is_active&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works pretty well in a number of simple cases, but doing things like pagination, posting of data, metadata, API discovery, and other important things ends up being a bit more work. This is where the resource oriented API frameworks come in.&lt;/p&gt;
&lt;div class="section" id="what-makes-a-decent-api-framework"&gt;
&lt;h2&gt;What makes a decent API Framework?&lt;/h2&gt;
&lt;p&gt;These features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pagination&lt;/li&gt;
&lt;li&gt;posting of data with validation&lt;/li&gt;
&lt;li&gt;Publishing of metadata along with querysets&lt;/li&gt;
&lt;li&gt;API discovery&lt;/li&gt;
&lt;li&gt;proper HTTP response handling&lt;/li&gt;
&lt;li&gt;caching&lt;/li&gt;
&lt;li&gt;serialization&lt;/li&gt;
&lt;li&gt;throttling&lt;/li&gt;
&lt;li&gt;permissions&lt;/li&gt;
&lt;li&gt;authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Proper API frameworks also need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Really good test coverage of their code&lt;/li&gt;
&lt;li&gt;Decent performance&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;An active community to advance and support the framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you take these factors, at this time there are only two API frameworks worth using, &lt;a class="reference external" href="http://django-tastypie.readthedocs.org/"&gt;django-tastypie&lt;/a&gt; and &lt;a class="reference external" href="http://django-rest-framework.org/"&gt;django-rest-framework&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="which-one-is-better-django-tastypie-or-django-rest-framework"&gt;
&lt;h2&gt;Which one is better? django-tastypie or django-rest-framework?&lt;/h2&gt;
&lt;p&gt;I say they are equal.&lt;/p&gt;
&lt;p&gt;You simply can't go wrong with either one. The authors and communities behind both of them are active, the code is solid and tested. And here are my specific thoughts about both of them:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;django-tastypie&lt;/h2&gt;
&lt;p&gt;Using django-tastypie is like playing with pure Python while using the Django ORM. I find it very comfortable. Seems really fast too. The documentation is incredible, and I rarely have any problems figuring anything out. It also supports OAuth 1.0a out of the box, which is mighty awesome these days.&lt;/p&gt;
&lt;p&gt;In fact, I wrote a custom OAuth2 handler for django-tastypie for &lt;a class="reference external" href="http://consumer.io"&gt;consumer.io&lt;/a&gt; that I'm working to extract for publication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;django-rest-framework&lt;/h2&gt;
&lt;p&gt;As it's based off Django 1.3 style Class Based Views (CBVs), it has a very familiar pattern. Actually, because of the quality of the documentation, I really prefer using django-rest-framework CBVs more than using Django's actual CBVs.&lt;/p&gt;
&lt;p&gt;Maybe I should make an HTML renderer for django-rest-framework? :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-what-about-django-piston"&gt;
&lt;h2&gt;But what about django-piston?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Don't use django-piston&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I don't want to say anything negative, but let's face it: &lt;strong&gt;django-piston is dead&lt;/strong&gt;. Besides a critical security release last year, nothing has been done for it in about 3 years. The documentation is weak, the code mostly untested, and the original author left. He has gone on to do some amazing things. Django-piston was amazing in its time, but its time has passed and so should you.&lt;/p&gt;
&lt;p&gt;The only reason for using django-piston for years has been that it supported OAuth, but django-tastypie now addresses that use case. I've used django-tastypie's basic OAuth class and rolled custom Authentication modules to support some extra OAuth flavors and found it wonderful.&lt;/p&gt;
&lt;p&gt;Use django-tastypie or django-rest-framework instead. You'll be much, much happier for it.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;a class="reference external" href="http://news.ycombinator.com/item?id=3954314"&gt;Discuss this on Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="api"></category><category term="review"></category></entry><entry><title>Django Requirements for a project</title><link href="http://pydanny.com/django-requirements-for-a-project.html" rel="alternate"></link><updated>2012-05-09T08:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/django-requirements-for-a-project.html</id><summary type="html">&lt;p&gt;Today I'm starting a new project. I'm working as fast as I can and hope to launch on Friday. What are my package dependencies?&lt;/p&gt;
&lt;div class="section" id="django-1-4"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/Django/1.4"&gt;Django==1.4&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unlike my last quick project which was &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, this effort really falls into &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt;'s sweet spot. I need sessions, forms, templates, and models to do things in an ideal Django pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="psycopg2-2-4-5"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/psycopg2"&gt;psycopg2==2.4.5&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I need transactions and hard-type validation in the database, which means PostgreSQL. If I didn't need transactions or the hard-type validation I would consider MongoDB instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-debug-toolbar-0-9-4"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-debug-toolbar"&gt;django-debug-toolbar==0.9.4&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because not using this tool is insane.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-extensions-0-8"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-extensions"&gt;django-extensions==0.8&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because amongst other things this library gives you, I never want to write my own &lt;tt class="docutils literal"&gt;TimeStampedModel&lt;/tt&gt; ever again. :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="south-0-7-5"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/South"&gt;South==0.7.5&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Django gives you the freedom to migrate data in the way you want. The way I want to do it is via South.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-registration-0-8-0"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-registration"&gt;django-registration==0.8.0&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Normally &lt;a class="reference external" href="http://pypi.python.org/pypi/django-social-auth"&gt;django-social-auth&lt;/a&gt; is my go-to tool for registration, but in this case I need simple username/password registration. This is a very solid tool, but you do have to make your own templates or find someone's fork that has a copy of templates that match.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-floppyforms-0-4-7"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-floppyforms"&gt;django-floppyforms==0.4.7&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An excellent tool for making your forms HTML5-ish out of the box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-crispy-forms-1-1-3"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-crispy-forms"&gt;django-crispy-forms==1.1.3&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The child of my own django-uni-forms, this will let me create forms using div-based controls super fast, and do layout customizations if I need them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-heroku-postgresify-0-2"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-heroku-postgresify"&gt;django-heroku-postgresify==0.2&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This tool makes getting the PostGreSQL settings out of Heroku trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-heroku-memcacheify-0-1"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/django-heroku-memcacheify"&gt;django-heroku-memcacheify==0.1&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This tool makes getting the memcache settings for Heroku trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gunicorn-0-14-2"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/gunicorn"&gt;gunicorn==0.14.2&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the cool kids who play in devops swear by Gunicorn. I use it because Heroku seems to recommend it for Django deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="installing-the-above-packages"&gt;
&lt;h2&gt;Installing the above packages&lt;/h2&gt;
&lt;p&gt;Never copy/paste these libraries directly into your projects. If you do that, you'll end up hating yourself later as your local instances become unmaintained forks of the real project. Also, unless you are really careful in your copy/pasting, you'll be in violation of various open source licenses. Odds are the FOSS police aren't going to find you, but I can assure you that when you bring in one of the authors of these packages to help you fix a problem he/she is going to be mighty annoyed at the lack of attribution.&lt;/p&gt;
&lt;p&gt;Do it the right way: do proper Python dependency management.&lt;/p&gt;
&lt;p&gt;Create a &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; file and install them as proper dependencies. The file should contain the following text:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Django==1.4
South==0.7.5
django-crispy-forms==1.1.3
django-debug-toolbar==0.9.4
django-extensions==0.8
django-floppyforms==0.4.7
django-heroku-memcacheify==0.1
django-heroku-postgresify==0.2
django-registration==0.8.0
gunicorn==0.14.2
psycopg2==2.4.5
&lt;/pre&gt;
&lt;p&gt;Once you have that, you install them thus in your &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install -r requirements.txt
&lt;/pre&gt;
&lt;p&gt;Now that I have all this, it's time to code!&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/pydanny/4358842735/"&gt;&lt;img alt="http://farm5.staticflickr.com/4027/4358842735_38991c0944.jpg" class="align-center" id="blizzard-of-2010" src="http://farm5.staticflickr.com/4027/4358842735_38991c0944.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="setup"></category></entry><entry><title>Los Angeles Open Source Sprint on May 12th!</title><link href="http://pydanny.com/los-angeles-open-source-sprint-on-may-12th.html" rel="alternate"></link><updated>2012-05-01T09:20:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/los-angeles-open-source-sprint-on-may-12th.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/pydanny/7132778527/"&gt;&lt;img alt="http://farm9.staticflickr.com/8022/7132778527_6e3b49b313_o.png" class="align-center" id="la-open-source-sprint-hosted-on-flickr" src="http://farm9.staticflickr.com/8022/7132778527_6e3b49b313_o.png" /&gt;&lt;/a&gt;
&lt;p&gt;This is a day long coding event in Los Angeles for Open Source developers of all languages and skill levels to come and code like fiends. They'll be joined by dozens of either really smart coders or nice people like me. Sponsors are providing food, drinks, venue, and more!&lt;/p&gt;
&lt;p&gt;RSVP at &lt;a class="reference external" href="http://www.meetup.com/LA-Hackathons/events/62796642/"&gt;http://www.meetup.com/LA-Hackathons/events/62796642/&lt;/a&gt; before it fills up! It's free.&lt;/p&gt;
&lt;p&gt;I'll be there to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Organize the event with the assistance of the awesome Los Angeles technical community!&lt;/li&gt;
&lt;li&gt;Code like a fiend. I want to work on django-mongonaut and could use some GraphViz and JavaScript help.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And now to open the floor to questions...&lt;/p&gt;
&lt;div class="section" id="where-and-when"&gt;
&lt;h2&gt;Where and when?&lt;/h2&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Spire.io
7257 Beverly Blvd #210
Los Angeles, CA 90036
&lt;/pre&gt;
&lt;p&gt;When:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
May 12, 2012
10 AM to 10 PM
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="is-this-like-a-hackathon"&gt;
&lt;h2&gt;Is this like a Hackathon?&lt;/h2&gt;
&lt;p&gt;Yup. See &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Hackathon#Sprints"&gt;http://en.wikipedia.org/wiki/Hackathon#Sprints&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="will-there-be-wifi"&gt;
&lt;h2&gt;Will there be Wifi?&lt;/h2&gt;
&lt;p&gt;Yes!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-m-just-starting-as-a-developer-should-i-come"&gt;
&lt;h2&gt;I'm just starting as a developer, should I come?&lt;/h2&gt;
&lt;p&gt;It depends.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you've never coded before&lt;/strong&gt;, this isn't the right place. Instead, you might consider one of the local coding workshops or classes. In fact, here's a good &lt;a class="reference external" href="http://www.meetup.com/Los-Angeles-Hack-Night/"&gt;bi-weekly hack night / study group&lt;/a&gt; for you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you've done a tutorial or two&lt;/strong&gt;, sprints can be a great way to learn new skills or hone your technique by sitting alongside experienced developers who actually need your help. A lot of projects have what are called 'low hanging fruit', which are 'simpler' tasks saved for beginner developers to wet their teeth on. Things I've learned at events like these include Git, Mercurial, JQuery, and a hundred other things that have made me a better coder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-if-i-don-t-have-a-project-of-my-own-to-bring-should-i-come"&gt;
&lt;h2&gt;What if I don't have a project of my own to bring? Should I come?&lt;/h2&gt;
&lt;p&gt;Heck yeah! There will be a number of projects around that you can join and contribute to in order to make the world a better place. There isn't a list up yet, but I'm hoping by Saturday there will be one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-if-i-want-to-come-and-recruit-people"&gt;
&lt;h2&gt;What if I want to come and recruit people?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Absolutely not&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is not a job fair and we don't want unnecessary distractions.&lt;/p&gt;
&lt;p&gt;On the other hand, if you want to help sponsor we'll happily mention you on the &lt;a class="reference external" href="http://www.meetup.com/LA-Hackathons/events/62796642/"&gt;meetup.com&lt;/a&gt; description.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="are-there-going-to-be-any-presentations-or-lightning-talks"&gt;
&lt;h2&gt;Are there going to be any presentations or lightning talks?&lt;/h2&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;This is a sprint, not a conference or demonstration. We'll try and limit announcements and interruptions as much as possible, the only exception being for letting you know food has arrived.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-i-bring"&gt;
&lt;h2&gt;What should I bring?&lt;/h2&gt;
&lt;p&gt;Your own functioning laptop with power cord. Neither event organizers, the venue, or sponsors are providing equipment. We also encourage you to bring a power strip labeled with your name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-m-sold-how-much-does-it-cost-and-where-do-i-register"&gt;
&lt;h2&gt;I'm sold! How much does it cost and where do I register?&lt;/h2&gt;
&lt;p&gt;The event costs you nothing and you RSVP at &lt;a class="reference external" href="http://www.meetup.com/LA-Hackathons/events/62796642/"&gt;http://www.meetup.com/LA-Hackathons/events/62796642/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="LA"></category><category term="sprint"></category><category term="hackathon"></category></entry><entry><title>Join us at DjangoCon Europe!</title><link href="http://pydanny.com/join-us-at-djangocon-europe.html" rel="alternate"></link><updated>2012-04-10T12:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/join-us-at-djangocon-europe.html</id><summary type="html">&lt;p&gt;This year in June, the European edition of &lt;a class="reference external" href="http://djangocon.eu"&gt;DjangoCon&lt;/a&gt; is going to be held in lovely &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zurich"&gt;Zurich&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Switzerland"&gt;Switzerland&lt;/a&gt;. It is my great fortune and delight to announce that &lt;a class="reference external" href="http://audreymroy.com"&gt;Audrey&lt;/a&gt; and I will be attending. Hooray!&lt;/p&gt;
&lt;p&gt;Needless to say, we're extremely excited. My &lt;a class="reference external" href="http://dannygreenfeld.blogspot.com/search/label/ploneconf2007"&gt;trip to Europe in 2007&lt;/a&gt; was an amazingly fun and educational experience, and I can't wait to share a similar experience with Audrey. We can't wait to see all our old European friends, make new ones, and be dazzled by what Europe has to offer.&lt;/p&gt;
&lt;p&gt;Also, let's face it, the conference is going to be &lt;strong&gt;incredible&lt;/strong&gt;. They've lined up some awesome venues, the food (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Raclette"&gt;cheese&lt;/a&gt;, chocolate, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Muesli"&gt;muesli&lt;/a&gt;, etc) in Switzerland is world-renowned, the website looks fantastic, and they've got Jacob Kaplan-Moss to keynote. It looks so good I'm surprised there are any &lt;a class="reference external" href="http://2012.djangocon.eu/sponsors/"&gt;sponsor slots left&lt;/a&gt;!&lt;/p&gt;
&lt;div class="section" id="talks"&gt;
&lt;h2&gt;Talks&lt;/h2&gt;
&lt;p&gt;While attending the conference, we submitted and hope to give a presentation on the positives (speed, flexibility, community, etc) and negatives (a few) of using &lt;a class="reference external" href="http://www.mongodb.org/"&gt;MongoDB&lt;/a&gt; as a &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; datastore. I'm also considering giving a second talk. Some ideas for that include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Zen of Django&lt;/li&gt;
&lt;li&gt;Django isn't for beginners (A Tredennick inspired talk explaining why teaching beginning developers Django isn't a good idea)&lt;/li&gt;
&lt;li&gt;Advanced Django Template Usage&lt;/li&gt;
&lt;li&gt;Advanced Django Models Usage (An intimidating talk to put together)&lt;/li&gt;
&lt;li&gt;Django Packages Thunderdome II&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any thoughts?&lt;/p&gt;
&lt;p&gt;While I'm at it, I'm going to poke any prospective conference goers to submit their own talks. I love attending conference talks and at PyCon US this year I barely got to see any. Show me what you got!&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/pydanny/1614703646/"&gt;&lt;img alt="http://farm3.staticflickr.com/2339/1614703646_2e2610162a.jpg" class="align-center" id="my-last-day-in-italy-back-in-2007-when-i-still-had-hair" src="http://farm3.staticflickr.com/2339/1614703646_2e2610162a.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="djangocon"></category><category term="mongodb"></category></entry><entry><title>Choosing a new python based blog engine</title><link href="http://pydanny.com/choosing-a-new-python-based-blog-engine.html" rel="alternate"></link><updated>2012-04-05T12:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/choosing-a-new-python-based-blog-engine.html</id><summary type="html">&lt;div class="section" id="why-a-new-blog-engine"&gt;
&lt;h2&gt;Why a new blog engine?&lt;/h2&gt;
&lt;p&gt;On my &lt;a class="reference external" href="http://pydanny.blogspot.com/"&gt;old blog&lt;/a&gt;, I had been having issues with Blogger for some time.  The WYSIWYG text editor was annoying in that it produced wonky HTML, so I had to hand craft the posts. Which meant I often wrote the HTML formatted copy in a text editor and then copy/pasted it into the browser. A few times this blew up and I really wished I had version controlled back ups. Adding code examples was problematic, even with a stylesheet helpfully provided by Google. Finally, some of the changes to the blog engine itself were beginning to worry me, so I started looking for alternatives.&lt;/p&gt;
&lt;p&gt;After my fiancee, Audrey Roy, converted her blog to &lt;a class="reference external" href="https://github.com/mojombo/jekyll"&gt;https://github.com/mojombo/jekyll&lt;/a&gt; at it's new location of &lt;a class="reference external" href="http://audreymroy.com"&gt;audreymroy.com&lt;/a&gt;, the static file hosting seemed so awesome I was impressed enough to &lt;a class="reference external" href="http://pydanny.com/tried-out-jekyll.html"&gt;give Jekyll a try&lt;/a&gt;. Why did Jekyll and static file hosting interest me so much?&lt;/p&gt;
&lt;div class="section" id="i-don-t-want-to-maintain-my-own-server"&gt;
&lt;h3&gt;I don't want to maintain my own server&lt;/h3&gt;
&lt;p&gt;A couple times I rolled out a blog on a site I stood up, but didn't really feel like maintaining a site. I want someone else to do it. When I write, I want someone else to worry about the details. I want to focus on writing and nothing else.&lt;/p&gt;
&lt;p&gt;Well... almost nothing else. You'll understand shortly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-want-to-be-able-to-write-without-connection"&gt;
&lt;h3&gt;I want to be able to write without connection&lt;/h3&gt;
&lt;p&gt;With blogger, I needed an internet connection to get my blog posts to format correctly. With Jekyll and other static file systems, I can just type away.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-want-to-publish-via-git"&gt;
&lt;h3&gt;I want to publish via git&lt;/h3&gt;
&lt;p&gt;My &lt;a class="reference external" href="http://pydanny-event-notes.rtfd.org"&gt;http://pydanny-event-notes.rtfd.org&lt;/a&gt; has really exploded in my own usage and continued because it uses the same patterns I use in software development. I'm used to the pattern of using Git to push up content, so why use naked HTML? Sure, there are RST-to-HTML processors that I could use to generate that HTML, but they always require some amount of manual correction. Jekyll, and it's alternatives, let me just write.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="jekyll-wasn-t-for-me"&gt;
&lt;h2&gt;Jekyll wasn't for me&lt;/h2&gt;
&lt;p&gt;I found Jekyll to be good and much more fun than Blogger, but not good enough. To sum up:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I prefer RestructuredText over Markdown.&lt;/li&gt;
&lt;li&gt;I don't know enough Ruby to easily customize things. I don't feel like diving into Ruby just to learn how to make modifications.&lt;/li&gt;
&lt;li&gt;The template engine was like Smarty/Django/Jinja2, but not as much fun. Debugging errors was very problematic. Which was a problem when I started to play with modifying the theme.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the second and third bullets, you might wonder why I would care about the underlying engine if all I wanted to do was write. Well, I'm well aware of the fact that I change opinions now and then.  :-)&lt;/p&gt;
&lt;p&gt;It was after trying out Jekyll that I started looking for &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; based static file blog systems. The choices that seemed appropriate were:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="blogofile"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://www.blogofile.com/"&gt;blogofile&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is probably the most mature, most common Python static file generator around. It looks really awesome, and everyone who uses it swears by it. Alas, it's powered by &lt;a class="reference external" href="http://www.makotemplates.org/"&gt;Mako&lt;/a&gt; templates, which is... um... &lt;a class="reference external" href="http://pydanny.blogspot.com/2010/12/stupid-template-languages.html"&gt;not my friend&lt;/a&gt; (apologies to &lt;a class="reference external" href="http://techspot.zzzeek.org/2010/12/04/in-response-to-stupid-template-languages/"&gt;Mike Bayer&lt;/a&gt;). What I really wanted was something with templates powered by &lt;a class="reference external" href="http://www.pocoo.org/projects/jinja2/"&gt;Jinja2&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hyde"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://hyde.github.com/"&gt;hyde&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hyde claims to have started as Jekyll's evil Python twin. On the surface it looks awesome. Where it fails is documentation. There are lots of wonderful features that appear to exist, but follow the links to those features and you find yourself on placeholder pages.&lt;/p&gt;
&lt;p&gt;In theory, I could have just looked at the hyde code and figured out stuff myself. Maybe even document out the holes.&lt;/p&gt;
&lt;p&gt;In practice, all I want to do is write blog posts. It's one thing to customize things to suit your needs, it's another thing to make things work. Or document a tool. Color me lazy if you will, but when it comes to blogging, that's just how I am.&lt;/p&gt;
&lt;p&gt;I think in the near future, once fully documented, Hyde is going to be AWESOME. For now? Well, I wanted another option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://pelican.readthedocs.org/"&gt;pelican&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was immediately hooked. Python powered engine with Jinja2 templates with &lt;strong&gt;complete documentation&lt;/strong&gt;. In fact, every time I asked the author for help, he resignedly pointed me at the documentation. How cool is that?&lt;/p&gt;
&lt;p&gt;At some point I'll use the &lt;tt class="docutils literal"&gt;CSS&lt;/tt&gt; setting to change the color of &lt;tt class="docutils literal"&gt;pygments&lt;/tt&gt; to something with white background and black text. For now I'm happy as things are now.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/77704901&amp;#64;N05/6831339872/"&gt;&lt;img alt="http://farm8.staticflickr.com/7043/6831339872_10d0c40171.jpg" class="align-center" id="pycon-cartwheel-with-glass" src="http://farm8.staticflickr.com/7043/6831339872_10d0c40171.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;&lt;a class="reference external" href="http://news.ycombinator.com/item?id=3804553"&gt;Discuss this post on Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="blog"></category></entry><entry><title>Calendar About Nothing</title><link href="http://pydanny.com/calendar-about-nothing.html" rel="alternate"></link><updated>2012-03-28T11:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/calendar-about-nothing.html</id><summary type="html">&lt;p&gt;On October 16th, 2011, which was one hundred and sixty-four days before I published this post, I resolved to get myself onto the Longest Streak list of &lt;a class="reference external" href="http://calendaraboutnothing.com/"&gt;Calendar About Nothing&lt;/a&gt;. Today, with this blog post, I've managed to do just that - get on the Longest Streaks.&lt;/p&gt;
&lt;p&gt;Calendar About Nothing tracks your open project commits on &lt;a class="reference external" href="http://github.com"&gt;Github&lt;/a&gt;. It tallies your total number of days, records your longest streak, and lets you compare yourself against other committers. The idea comes from an &lt;a class="reference external" href="http://lifehacker.com/281626/jerry-seinfelds-productivity-secret?tag=softwaremotivation"&gt;article&lt;/a&gt; where Jerry Seinfeld says his secret to productivity is to get something done every day, because if you skip one day then skipping another day is easier.&lt;/p&gt;
&lt;div class="section" id="i-feel-a-great-sense-of-accomplishment"&gt;
&lt;h2&gt;I feel a great sense of accomplishment.&lt;/h2&gt;
&lt;p&gt;The majority of those days I would like to think I did real commits. I pledged to myself to do more than just white space tweaks or write a script to do the work for me. I wanted to accomplish things and make a difference. I started projects, wrote code, cleaned up old code, added tests, documented a lot, and moved my blog here. It's been an awesome time, and keeping my fingers constantly in projects has been eye opening.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-feel-a-great-sense-of-relief"&gt;
&lt;h2&gt;I feel a great sense of relief.&lt;/h2&gt;
&lt;p&gt;I've really enjoyed this but there were days it was hard to get to the internet or days I was busy on other things. I discovered early on my phone was not a good interface with Github's text editor. Some days I had no desire to code or lacked the creativity to write. Then I remembered that my ability to work openly on Github is a gift, and I should just do it. Now I can relax a bit and if I miss a day, it's not such a big deal. I've made it to the Longest Streak list!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="going-for-a-longer-streak"&gt;
&lt;h2&gt;Going for a longer streak&lt;/h2&gt;
&lt;p&gt;We'll see what happens now. I just feel happy that I've captured the moment and made my mark on the board. I invite you to do the same.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/pydanny/7024690837/in/photostream/"&gt;&lt;img alt="http://farm7.staticflickr.com/6216/7024690837_0974c93f63_o.png" class="align-center" id="my-place-on-calendar-about-nothing" src="http://farm7.staticflickr.com/6216/7024690837_0974c93f63_o.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category></entry><entry><title>Launching our API at PyCon 2012</title><link href="http://pydanny.com/launching-our-api-at-pycon-2012.html" rel="alternate"></link><updated>2012-03-09T07:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/launching-our-api-at-pycon-2012.html</id><summary type="html">&lt;p&gt;A few months ago me and my fiancee, &lt;a class="reference external" href="http://audreymroy.com"&gt;Audrey Roy&lt;/a&gt;, launched our start up, &lt;a class="reference external" href="http://consumernotebook.com"&gt;Consumer Notebook&lt;/a&gt;. It's a Python powered product comparison site that combines the best features of &lt;a class="reference external" href="http://opencomparison.org"&gt;Open Comparison&lt;/a&gt;, Yelp, Consumer Reports, and Pinterest. We've worked day and night to make it better, with countless members of the Python community using the site and giving us invaluable feedback.&lt;/p&gt;
&lt;p&gt;All of that brings us to &lt;a class="reference external" href="http://us.pycon.org/2012/"&gt;PyCon&lt;/a&gt;. We're not just here as attendees and participants, but also to promote our startup.  It used to be the cool thing to launch your startup at SXSW, but times have changed. Now it's the cool thing to launch at PyCon!&lt;/p&gt;
&lt;p&gt;Like Twilio, Twitter, Facebook, and Google, we've got an &lt;a class="reference external" href="http://api.consumernotebook.com"&gt;API&lt;/a&gt; we want developers to use. And as an upcoming startup, we've got to really be creative in how we gain your attention, so here is what we're doing for PyCon 2012:&lt;/p&gt;
&lt;div class="section" id="demos-at-our-pycon-startup-row-booth"&gt;
&lt;h2&gt;1. Demos at our &lt;a class="reference external" href="https://us.pycon.org/2012/community/openspaces/capoeira/"&gt;PyCon Startup Row&lt;/a&gt; booth.&lt;/h2&gt;
&lt;p&gt;Thanks PyCon!&lt;/p&gt;
&lt;p&gt;We've got a booth on Saturday. We've got banners and bright red track jackets. We're giving out handy API reference cards, as well as 10 different &lt;a class="reference external" href="http://consumernotebook.com/lists/audreyr/list-of-oreo-cookie-flavors/"&gt;flavors of Oreo cookies&lt;/a&gt; (see our site for a complete list of every Oreo cookie flavor, by the way).&lt;/p&gt;
&lt;p&gt;So stop on by, sign up for the BETA, have a cookie, and talk to us about our API. For that matter, feel free to talk to me or Audrey about the API any time you see us. We're wearing bright red jackets with '&lt;strong&gt;Ask me about our API&lt;/strong&gt;' on our back.&lt;/p&gt;
&lt;p&gt;Speaking of the API, the next item on our plan is...&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="a-big-kickoff-api-contest"&gt;
&lt;h2&gt;2. A big kickoff API contest.&lt;/h2&gt;
&lt;p&gt;We've put together the Consumer Notebook &lt;a class="reference external" href="http://api.consumernotebook.com"&gt;API&lt;/a&gt;, which lets you get product list
and comparison data out of our site via a simple REST interface.&lt;/p&gt;
&lt;p&gt;We're kicking off our PyCon 2012 API launch with an &lt;a class="reference external" href="http://developers.consumernotebook.com/contest.html"&gt;API contest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You have from now until April 22 to find new and exciting ways to use our &lt;a class="reference external" href="http://api.consumernotebook.com"&gt;API&lt;/a&gt;. If you win we'll give you a Kindle Fire or equivalent gift certificate valid in your nation of origin.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://developers.consumernotebook.com/contest.html"&gt;API Contest Details&lt;/a&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/pydanny/6821231296/sizes/m/in/photostream/"&gt;&lt;img alt="http://farm8.staticflickr.com/7189/6821231296_d0670e84b7_m.jpg" class="align-center" id="grid-of-python-books" src="http://farm8.staticflickr.com/7189/6821231296_d0670e84b7_m.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="we-re-hosting-the-saturday-night-pycon-capoeira-open-space"&gt;
&lt;h2&gt;3. We're hosting the Saturday night &lt;a class="reference external" href="https://us.pycon.org/2012/community/openspaces/capoeira/"&gt;PyCon Capoeira Open Space&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Want to see some awesome Capoeira moves? Want to learn some of the basics? Want to just have fun?&lt;/p&gt;
&lt;p&gt;We've hired professional Hollywood stuntman and Capoeira instructor to the stars, &lt;a class="reference external" href="http://valleycapoeira.com/?page_id=7"&gt;Contra Mestre Xingu&lt;/a&gt;, to come up from Los Angeles to lead this event. In addition to appearing in movies, videos, and commercials, he's got first hand experience with snakes. In his own words:&lt;/p&gt;
&lt;blockquote class="epigraph"&gt;
&lt;p&gt;Capoeira saved my life. What? How? Well it was a sunny afternoon, I was shooting a film in the Hollywood hills off Coldwater Canyon at a house. I was running back to set from the bathroom and out of nowhere a rattlesnake jumped up from the ground and tried to bite me. I quickly jumped out of the way and did a fast negative &lt;a class="reference external" href="http://en.wikipedia.org/wiki/List_of_capoeira_techniques#Rol.C3.AA"&gt;rolé&lt;/a&gt; away from the snake. Then I called the other people on set and we caught it. I really didn't think much of it afterwards until after the shoot. My friend told me the rattlesnake was a young one and I'm lucky I didn't get bitten.  When a younger rattler bites you, it usually unloads all of it's venom in you because it cannot control the amount it releases.&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Contra Mestre Xingu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Over 30 people have signed up up for this event, including Python core developers.&lt;/p&gt;
&lt;p&gt;Details:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
When: Saturday, 8pm - 10pm
What to bring: Camera!
What to bring if you are participating: Workout clothes, water bottle
&lt;/pre&gt;
&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/pydanny/6821195620/sizes/s/in/photostream/"&gt;&lt;img alt="http://farm8.staticflickr.com/7182/6821195620_2b7870a39c_m.jpg" class="align-center" id="location-of-the-pycon-capoeira-open-space-event" src="http://farm8.staticflickr.com/7182/6821195620_2b7870a39c_m.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;Location: The PyCon upstairs central open space&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;See you around!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="OAuth"></category><category term="api"></category><category term="Consumer-Notebook"></category><category term="pycon"></category></entry><entry><title>The sorry state of Python OAuth providers</title><link href="http://pydanny.com/the-sorry-state-of-python-oauth-providers.html" rel="alternate"></link><updated>2012-03-05T07:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/the-sorry-state-of-python-oauth-providers.html</id><summary type="html">&lt;p&gt;This is one of those challenging posts to write. The people whose projects I'm going to describe have put in a lot of dedicated, hard work to overcome a challenging subject. Writing an OAuth consumer is a hard problem and writing an OAuth provider is an even harder problem. The efforts put in by the authors of these projects has been nothing short of incredible. The problem, however, is that the existing projects are not usable as-is, and need the support of the community in order to improve.&lt;/p&gt;
&lt;p&gt;The terrible thing is that this is a solved problem within our community. Python based projects are successfully implementing OAuth providers, and often using internally hacked versions of the efforts I'm about to describe. However, they aren't giving this back to the community. It might be that they want to protect their competitive edge, but I'm going to be nice and say that it's because their too busy to find time to send pull requests back.&lt;/p&gt;
&lt;p&gt;In any case, let me present our use case. For &lt;a class="reference external" href="http://consumernotebook.com"&gt;Consumer Notebook&lt;/a&gt; we want an &lt;a class="reference external" href="http://api.consumernotebook.com"&gt;API&lt;/a&gt;. We want to be able to track usernames, passwords, and the application using our &lt;a class="reference external" href="http://api.consumernotebook.com"&gt;API&lt;/a&gt; - which is the OAuth use case. Much as BasicAuth or DigestAuth is the easier way to go in terms of implementation, OAuth was designed for our use case: allowing third-party developers to build apps using our API without having to store credentials. In fact, it's a critical security issue: Twitter dealt with malicious &amp;quot;Twitter apps&amp;quot; stealing usernames and passwords before they switched to OAuth. As an API provider, being an OAuth provider might be more challenging, but it's the responsible thing to do.&lt;/p&gt;
&lt;div class="section" id="existing-oauth-providers"&gt;
&lt;h2&gt;Existing OAuth Providers&lt;/h2&gt;
&lt;p&gt;Time to get into the meat of the issue. Let's look at the current implementations of OAuth providing within the Python community. Again, I wish I didn't have to be negative, but I'm up against the wall:&lt;/p&gt;
&lt;div class="section" id="oauth2app-django"&gt;
&lt;h3&gt;OAuth2app (Django)&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/hiidef/OAuth2app"&gt;https://github.com/hiidef/OAuth2app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OAuth version: 2.0&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Strange URL construction that might be a security hole.&lt;/li&gt;
&lt;li&gt;Bitwise operators in the logic making it harder to debug. Security is hard. Don't complicate your security code because your mistakes will cost.&lt;/li&gt;
&lt;li&gt;Uncommented code. Security is hard. Comment your code.&lt;/li&gt;
&lt;li&gt;Documentation outdated and insufficient.&lt;/li&gt;
&lt;li&gt;Doesn't work without serious hacking and adding of undocumented parameters. Which means I have to worry if I'm breaking anything.&lt;/li&gt;
&lt;li&gt;We managed to get it working with GET requests.  Then we realized that we were using GET requests, which seems like a bad idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="django-piston-django"&gt;
&lt;h3&gt;django-piston (Django)&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bitbucket.org/jespern/django-piston"&gt;https://bitbucket.org/jespern/django-piston&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OAuth version: 1.0&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stalled project.&lt;/li&gt;
&lt;li&gt;Documentation insufficient.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="django-oauth-plus-django"&gt;
&lt;h3&gt;django-oauth-plus (Django)&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://code.larlet.fr/django-oauth-plus"&gt;http://code.larlet.fr/django-oauth-plus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OAuth version: 1.0a&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tutorial doesn't work.&lt;/li&gt;
&lt;li&gt;Documentation insufficient.&lt;/li&gt;
&lt;li&gt;Doesn't work without serious hacking. Which means I have to worry if I'm breaking anything.&lt;/li&gt;
&lt;li&gt;We could not get it to work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="lastuser-flask"&gt;
&lt;h3&gt;lastuser (Flask)&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/hasgeek/lastuser"&gt;https://github.com/hasgeek/lastuser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OAuth version: 2.0&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No documentation&lt;/li&gt;
&lt;li&gt;No tests to serve as documentation&lt;/li&gt;
&lt;li&gt;Lack of documentation means I'm not sure if it is actually a OAuth provider.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python-oauth2-python"&gt;
&lt;h3&gt;python-oauth2 (Python)&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/dgouldin/python-OAuth2"&gt;https://github.com/dgouldin/python-OAuth2&lt;/a&gt; (best example)&lt;/p&gt;
&lt;p&gt;OAuth version: 1.0&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Called 'OAuth2' but only works with OAuth 1? Really? &lt;strong&gt;WTF?&lt;/strong&gt; This needs to fixed.&lt;/li&gt;
&lt;li&gt;Documentation insufficient.&lt;/li&gt;
&lt;li&gt;Provides only a skeleton of a provider. Not a turnkey solution.&lt;/li&gt;
&lt;li&gt;Doesn't work as a provider without serious hacking. Which means I have to worry if I'm breaking anything.&lt;/li&gt;
&lt;li&gt;Many, many forks of the project, with various blog posts advising people to use various particular forks rather than the main one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-about-a-solution"&gt;
&lt;h2&gt;How about a solution?&lt;/h2&gt;
&lt;p&gt;Alright, I've ranted and laid out out a bunch of bullets identifying a problem. Time to try and fix the problem.&lt;/p&gt;
&lt;p&gt;For starters, a production-usable OAuth provider should meet certain standards:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Near turnkey solution&lt;/li&gt;
&lt;li&gt;Working code (duplicates above bullet but I'm making a point)&lt;/li&gt;
&lt;li&gt;Working tutorials&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Commented code&lt;/li&gt;
&lt;li&gt;Linted code&lt;/li&gt;
&lt;li&gt;Test coverage &amp;gt; 80%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is my specification. If your project for any Python framework matches it, I'll list it on a forthcoming website that also covers Python based OAuth consumers.&lt;/p&gt;
&lt;p&gt;For what it's worth, Idan Gazit has been working on something to help address the problem, specifically &lt;a class="reference external" href="https://github.com/idan/oauthlib"&gt;https://github.com/idan/oauthlib&lt;/a&gt;. It also is intended to cover the Python OAuth consumption issue I didn't cover in this article.  It and related efforts need a lot of work, so...&lt;/p&gt;
&lt;p&gt;The PyCon US 2012 sprints start on March 12. I think as a community, we Pythonistas should band together and make things right. I think we'll have the brainpower and enough eyes on the problem to make serious headway on the issue, either by fixing existing solutions or creating new ones. Right now I've got interest from people to join in and help, including Idan Gazit, Audrey Roy, George Hickman, and others.&lt;/p&gt;
&lt;p&gt;We're willing to put in the time to make OAuth in Python better, how about you?&lt;/p&gt;
&lt;p&gt;Join us at the PyCon US sprints either in person or on-line. &lt;a class="reference external" href="https://us.pycon.org/2012/community/sprints/projects/"&gt;Details of the sprint are near the bottom of this PyCon Sprint page&lt;/a&gt;.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://oauth.net/"&gt;&lt;img alt="http://farm8.staticflickr.com/7201/6803475636_f34fb400eb_m.jpg" class="align-center" id="oauth-logo" src="http://farm8.staticflickr.com/7201/6803475636_f34fb400eb_m.jpg" /&gt;&lt;/a&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="updates"&gt;
&lt;h3&gt;Updates&lt;/h3&gt;
&lt;p&gt;03/05/2012 - Removed Velruse from the list of providers as it's lead, Michael Merickel, clarified that it is not a provider.
03/06/2012 - Added a link to the PyCon OAuth sprints.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;a class="reference external" href="http://news.ycombinator.com/item?id=3666853"&gt;Discuss this post on Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="OAuth"></category><category term="api"></category><category term="Consumer-Notebook"></category><category term="rant"></category></entry><entry><title>You should Heroku</title><link href="http://pydanny.com/you-should-heroku.html" rel="alternate"></link><updated>2012-02-28T12:45:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/you-should-heroku.html</id><summary type="html">&lt;p&gt;In mid-November me and my fiancee, &lt;a class="reference external" href="http://audreymroy.com"&gt;Audrey Roy&lt;/a&gt; began our startup. We had been frustrated with trying to do on-line product research and came up with an idea to take the lessons learned from &lt;a class="reference external" href="http://djangopackages.com"&gt;Django Packages&lt;/a&gt; / &lt;a class="reference external" href="http://opencomparison.org"&gt;Open Comparison&lt;/a&gt; and apply them to a commercial effort. The result has been &lt;a class="reference external" href="http://consumernotebook.com"&gt;Consumer Notebook&lt;/a&gt;, and it's been a steadily growing success.&lt;/p&gt;
&lt;p&gt;We've been bootstrapping the project. That means supporting it with consulting and grinding away on it during our free time. That means 12-16 hour days of Python, Django, and Javascript coding, marketing, system administration, graphic design, communicating with users and vendors, and a thousand other tasks. Since we've had to explore new techniques for making things work on the backend and front end, that means we've needed to have a robust system that is trivial to deploy and certain to never go down. Which, of course, requires serious sys admin skills.&lt;/p&gt;
&lt;div class="section" id="the-big-problem"&gt;
&lt;h2&gt;The Big Problem&lt;/h2&gt;
&lt;blockquote class="pull-quote"&gt;
&lt;strong&gt;I hate system administration work.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Sys admin is boring. I find it tedious and dull. Devops doesn't make it easier/faster, it just makes it possible to do it at a large scale.&lt;/p&gt;
&lt;p&gt;Fortunately for me, my fiancee likes the sys admin side of things. However, she's got serious programming skills in Python/Javascript, understands CSS, is an excellent illustrator, and has good business skills to boot. Which means &lt;strong&gt;I needed Audrey not to be doing sys admin&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-platform-as-a-service"&gt;
&lt;h2&gt;Solution: Platform as a Service&lt;/h2&gt;
&lt;p&gt;Platform as a Service, or &lt;a class="reference external" href="http://en.wikipedia.org/wiki/PaaS"&gt;PaaS&lt;/a&gt;, is where someone else does the majority of work involved in system administration. There are now &lt;a class="reference external" href="http://www.quora.com/What-is-the-Heroku-equivalent-for-Django-applications-Edit-Question-not-relevant-anymore-as-Heroku-now-supports-Django"&gt;dozens of companies edging into the Python capable PaaS space&lt;/a&gt;. We've been leery of using any of them but finally settled on &lt;a class="reference external" href="http://heroku.com"&gt;Heroku&lt;/a&gt; after a long period of evaluation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-heroku"&gt;
&lt;h2&gt;Why Heroku?&lt;/h2&gt;
&lt;p&gt;We choose Heroku for a number of reasons:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We competed in a Los Angeles area Hacking contest with &lt;a class="reference external" href="http://rdegges.com/"&gt;Randall Degges&lt;/a&gt;. He was responsible for the sys admin and went with Heroku. He got it up and it was out of the way for the competition. He spent his time coding, adding features, and fixing templates instead of tweaking knobs on something in the cloud. We saw other people not deliver products at the contest because of this issue.&lt;/li&gt;
&lt;li&gt;Heroku doesn't lock you in. If I wanted to, I could take all the pieces out in about 10 minutes, then go old school and host it myself on my own closet server.&lt;/li&gt;
&lt;li&gt;Heroku has very good &lt;a class="reference external" href="http://devcenter.heroku.com/categories/heroku-postgres"&gt;PostgreSQL&lt;/a&gt; support. Our web framework is &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt;, which has an ORM that works best with PostgreSQL.&lt;/li&gt;
&lt;li&gt;Heroku has staff. At least seventy of them. Odds are they would have people around 24/7 to deal with issues.&lt;/li&gt;
&lt;li&gt;The add-on system means they've got many other people adding great new features. Want &lt;a class="reference external" href="https://addons.heroku.com/mongolab"&gt;MongoDB&lt;/a&gt;? No problem! How about something to &lt;a class="reference external" href="https://addons.heroku.com/pandastream"&gt;handle video&lt;/a&gt;? You got it!&lt;/li&gt;
&lt;li&gt;Heroku scales up trivially. If we get an upswell of users, I just type &lt;tt class="docutils literal"&gt;heroku ps:scale web=50&lt;/tt&gt; and I've got 50 web server things handling the load.&lt;/li&gt;
&lt;li&gt;When I think of Heroku I think of Puffer Fish. Which is awesome because Puffer Fish are awesome.&lt;/li&gt;
&lt;/ol&gt;
&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/saspotato/5776592544/"&gt;&lt;img alt="http://farm6.staticflickr.com/5303/5776592544_fb15a2902a_m.jpg" class="align-center" id="puffer-fish" src="http://farm6.staticflickr.com/5303/5776592544_fb15a2902a_m.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Creative Commons: Some rights reserved by &lt;a class="reference external" href="http://www.flickr.com/photos/saspotato/5776592544/"&gt;Saspotato&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="things-that-we-really-liked-about-using-heroku"&gt;
&lt;h3&gt;Things that we really liked about using Heroku&lt;/h3&gt;
&lt;p&gt;As we progressed down the journey of building our site, we discovered even more nice features about Heroku. Here are some of the things that really make me smile:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://devcenter.heroku.com/articles/releases"&gt;Releases&lt;/a&gt; and especially &lt;a class="reference external" href="http://devcenter.heroku.com/articles/releases#rollback"&gt;rollbacks&lt;/a&gt; means we deploy with a lot more confidence.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://devcenter.heroku.com/articles/logging"&gt;Logging&lt;/a&gt; and other diagnostic add-ons like &lt;a class="reference external" href="https://addons.heroku.com/sentry"&gt;Sentry&lt;/a&gt; and &lt;a class="reference external" href="https://addons.heroku.com/newrelic"&gt;New Relic&lt;/a&gt; means we know what's going on.&lt;/li&gt;
&lt;li&gt;During one huge data migration effort I scaled up the workers so a 6 hour task became a 5 minute task. Cost was less then 10 cents for workers instead of me losing hours of labor.&lt;/li&gt;
&lt;li&gt;In case we go viral, we don't have to worry about load balancers and all that high performance stuff.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-does-that-mean"&gt;
&lt;h2&gt;What does that mean?&lt;/h2&gt;
&lt;p&gt;It means I'm doing the deployments. I'm the sys admin. And I'm happy with my role because it takes minutes out of my day. Me and Audrey team up on everything else and the results so far have been great. If you've ever worked with me, the fact that &lt;a class="reference external" href="http://consumernotebook.com"&gt;Consumer Notebook&lt;/a&gt; is administered and deployed by me is going to be a shock.&lt;/p&gt;
&lt;p&gt;We've been able to really focus on development of the project. And when I mean development, I mean a lot of things. I mean:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Data Modeling&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://api.consumernotebook.com/"&gt;Documenting the API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Marketing: &lt;a class="reference external" href="http://insidertips.consumernotebook.com/"&gt;blogging on Consumer Notebook&lt;/a&gt;, &lt;a class="reference external" href="https://twitter.com/consumernotebk"&gt;Tweeting&lt;/a&gt;, and working with other groups&lt;/li&gt;
&lt;li&gt;Trying out &lt;a class="reference external" href="https://github.com/consumernotebook/tickets/issues"&gt;public tickets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Iterating through the user experience by communicating to users&lt;/li&gt;
&lt;li&gt;All the boring legal and business stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What you don't see is anything about sys admin issues. That's because what could have been a huge sink in time and resources is pretty much gone. We deploy staging servers with a bit of code I copy/pasted from a bash history into a Fabric script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;

&lt;span class="n"&gt;commands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;heroku create --stack cedar&lt;/span&gt;
&lt;span class="s"&gt;heroku addons:add memcache&lt;/span&gt;
&lt;span class="s"&gt;heroku config:add S3_KEY=HAHAHAHAHAHA S3_SECRET=NOTGIVINGITOUT&lt;/span&gt;
&lt;span class="s"&gt;heroku addons:add redistogo&lt;/span&gt;
&lt;span class="s"&gt;heroku addons:add sendgrid:starter&lt;/span&gt;
&lt;span class="s"&gt;heroku addons:add mongolab:starter&lt;/span&gt;
&lt;span class="s"&gt;heroku addons:add sentry:test&lt;/span&gt;
&lt;span class="s"&gt;heroku addons:add pgbackups&lt;/span&gt;
&lt;span class="s"&gt;heroku addons:add custom_domains:basic&lt;/span&gt;
&lt;span class="s"&gt;heroku addons:add zerigo_dns:basic&lt;/span&gt;
&lt;span class="s"&gt;heroku domains:add staging.consumernotebook.com&lt;/span&gt;
&lt;span class="s"&gt;heroku addons:add ssl:piggyback&lt;/span&gt;
&lt;span class="s"&gt;git push heroku master&lt;/span&gt;
&lt;span class="s"&gt;heroku scale web=1&lt;/span&gt;
&lt;span class="s"&gt;heroku addons:add heroku-PostgreSQL:ronin&lt;/span&gt;
&lt;span class="s"&gt;heroku pg:wait&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_staging&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How awesome is that?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-much-does-heroku-really-cost"&gt;
&lt;h2&gt;How much does Heroku really cost?&lt;/h2&gt;
&lt;p&gt;You can do Heroku for free. A lot of people do. More power to them.&lt;/p&gt;
&lt;p&gt;But let's face it, beyond a certain point, every PaaS, including Heroku, is going to be more expensive then getting your own EC2, Rackspace, Dreamhost, or Linode hosted server. For a fraction of the cost, you can provision a server, install all the bits, configure the database, http server, load balancers, and even write Chef/Puppet/Fabric scripts so you can do it repeatedly at scale. Cheap!&lt;/p&gt;
&lt;p&gt;So why pay more for Heroku? Why not just do it ourselves? For example, right now we're on dedicated PostgreSQL hosting which Heroku charges us $200/month. That's a lot, right?&lt;/p&gt;
&lt;blockquote class="pull-quote"&gt;
&lt;strong&gt;Wrong.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Right now we're seeing a 50% increase in visits every day. So if we ran our own servers, Chef/Puppet/Fabric or not, odds are we would be spending at least 10 hours a month doing server work. And I can assure you that when we consult that we make more than $20/hour.&lt;/p&gt;
&lt;blockquote class="pull-quote"&gt;
&lt;strong&gt;$200 &amp;lt; 10 hours of us doing consulting work to bootstrap the project.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Until you hit a certain point, these days the real cost of servers is labor. If you're a developer or small effort, and you think going with a cheap hosting provider is the way to go, think again. Think about the hours you're losing monkeying around with servers and databases instead of getting code done.&lt;/p&gt;
&lt;p&gt;Heroku saves us money.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-takeaway"&gt;
&lt;h2&gt;The Takeaway&lt;/h2&gt;
&lt;p&gt;One of the problems Django and other Python web frameworks has had is the difficulty of deployment. I can't tell you how many projects I didn't do because of the thought of handling the sys admin side of things. Let's face it, one of the great ongoing successes for PHP is that deploying the majority of sites is trivial.&lt;/p&gt;
&lt;p&gt;With the rise of devops we've seen a lot of developers across languages and frameworks dive into &lt;strong&gt;Chef&lt;/strong&gt; and &lt;strong&gt;Puppet&lt;/strong&gt;. It's been sadly amusing watching people muck around with these great tools to make the deployment of 1-2 servers 'easier', when the real benefit of those tools has been to do things at scale. Things like deployments of fifty servers at once or deployment abstractions for hundreds of people (my fancy talk for PaaS).&lt;/p&gt;
&lt;p&gt;In any case, things have changed. Deploying Python web apps is as trivial as deploying PHP code.&lt;/p&gt;
&lt;p&gt;For developers I see great times ahead.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;a class="reference external" href="http://news.ycombinator.com/item?id=3643910"&gt;Discuss this post on Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="heroku"></category><category term="consumernotebook"></category><category term="mongodb"></category></entry><entry><title>I use this</title><link href="http://pydanny.com/i-use-this.html" rel="alternate"></link><updated>2012-02-25T12:45:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/i-use-this.html</id><summary type="html">&lt;p&gt;I had been meaning to do this for some time, and even had a nascent page for it on this site already. I just noticed my old friend &lt;a class="reference external" href="http://jessica.hammer.usesthis.com/"&gt;Jessica Hammer&lt;/a&gt; was featured on &lt;cite&gt;usesthis.com&lt;/cite&gt;. Then I remembered &lt;a class="reference external" href="http://kennethreitz.com/"&gt;Kenneth Reitz&lt;/a&gt; &lt;a class="reference external" href="http://kennethreitz.com/i-use-this.html"&gt;blogged about his tools&lt;/a&gt; not that long ago. Looks like it is my turn now.&lt;/p&gt;
&lt;p&gt;So without further ado, seven of my tools, specifically software.&lt;/p&gt;
&lt;div class="section" id="textmate"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://consumernotebook.com/textmate-the-missing-editor-for-mac-os-x/4f4ad4e35a4305000d000000/"&gt;TextMate&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote class="epigraph"&gt;
&lt;p&gt;&amp;quot;My relationship with Textmate isn't healthy.&amp;quot;&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Myself&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I continue to use it, even though it's unsupported, has weird whitespace issues, and people make fun of me. I don't mean the EMACS/Vim people, cause they mock everyone, I mean people using &lt;a class="reference external" href="http://consumernotebook.com/sublime-text/4f4ad53a5a4305000e000000/"&gt;Sublime Text 2&lt;/a&gt;, &lt;a class="reference external" href="http://consumernotebook.com/jetbrains-pycharm/4f4ad5b861e9e4000e000000/"&gt;PyCharm&lt;/a&gt;, and NotePad on Windows. I try to make a brave face of it and for the most part I succeed.&lt;/p&gt;
&lt;p&gt;Speaking of which, you know how you sometimes wish deep inside that the fairy tales of youth were actually true? Or that there was a zombie apocalypse and you got the chance to show off how all your eclectic skills and pursuits would make you a survival genius? Well, I feel that way about TextMates 2 being released in my lifetime. Alas, stark reality stares me in the face; yet I cling to hope.&lt;/p&gt;
&lt;p&gt;Alright, sometimes I dabble in Sublime Text 2.  I've played with PyCharm. In 2010 I even worked on a project where use of &lt;a class="reference external" href="http://consumernotebook.com/pydev/4f4ad5d55a4c6f000d000000/"&gt;PyDev&lt;/a&gt; was mandatory. When I touch servers it's EMACS, Vi, or even Nano. And yet to TextMate I always return.&lt;/p&gt;
&lt;p&gt;Is TextMate dead? Probably. And yes, someday I'll switch over to something else, probably Sublime Text 2. In order to be certain I'm starting to &lt;a class="reference external" href="http://consumernotebook.com/lists/pydanny/complete-list-of-python-editors/"&gt;list all the Python editors&lt;/a&gt; so I can review them properly before switching.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="keynote"&gt;
&lt;h2&gt;Keynote&lt;/h2&gt;
&lt;p&gt;I never liked Powerpoint. I tried to use Google Presentations for years. Finally I tried Apple's Keynote for presentations and it was an amazing decision. It's simple, easy, and remains out of my way. To make code pretty I copy/paste pygmentized code and it just works.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="read-the-docs"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://rtfd.org"&gt;Read the Docs&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote class="epigraph"&gt;
&lt;p&gt;&amp;quot;Wikis are where documentation goes to die.&amp;quot;&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Jacob Kaplan-Moss&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm of the opinion that Python open source projects that don't have Sphinx documentation are not ready for production use. And if I have to decide between two projects that are close in capability and one of them isn't on Read the Docs, then you know which way I'll go.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Because I want my documentation as up-to-date as possible. Wikis often fail in this, so do custom documentation solutions, and so does upload tarballs to a service. You should be using the same patterns for documentation as you do coding. Use Read the Docs.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="heroku"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://heroku.com"&gt;Heroku&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I first heard that Heroku had become yet-another-Python-PAAS, I shrugged. The field is crowded. We've tried a bunch, but never felt like committing a real project to this type of service.&lt;/p&gt;
&lt;p&gt;After a coding contest in October over in Hollywood where &lt;a class="reference external" href="http://rdegges.com"&gt;Randall Degges&lt;/a&gt; served as sys admin for the project and tried out Heroku, I was impressed. Heroku provided a nice command-line interface and had an impressive feature set on it's own. A stand-out feature I noticed was the &lt;a class="reference external" href="http://add-ons.heroku.com"&gt;add-ons&lt;/a&gt;, which are Heroku moderated third-party plug-ins for their service. Finally, it didn't hurt that Heroku has the staff to provide 24/7 coverage of their servers.&lt;/p&gt;
&lt;p&gt;We decided to give it a try and the results are that &lt;a class="reference external" href="http://consumernotebook.com"&gt;Consumer Notebook&lt;/a&gt; is hosted by Heroku. We're more than pleased, and I'll be blogging about the advantages of PaaS over doing-servers-yourself in a future article.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="password"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://agilebits.com/store"&gt;1Password&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For all my umpteen accounts they all have different, crazy obscure passwords. All I need to do is remember one password and I've got access to them. What is even better is that it allows me to look up passwords in a crowded room - they are kept obfuscated by the password &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;****&lt;/span&gt;&lt;/tt&gt; field. So much better than trying to keep it all in my head, or relying on weird coding patterns.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="consumer-notebook"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://consumernotebook.com"&gt;Consumer Notebook&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yup, I eat my own dogfood. It lets me &lt;a class="reference external" href="http://consumernotebook.com/grids/~pydanny/"&gt;build comparison grids&lt;/a&gt; or look at what &lt;a class="reference external" href="http://consumernotebook.com/grids/r1chardj0n3s/10-android-tablets/"&gt;other people are comparing&lt;/a&gt;. I can &lt;a class="reference external" href="http://consumernotebook.com/lists/~pydanny/"&gt;list stuff for any purpose&lt;/a&gt;, and turn the content of those lists into grids. It is still in BETA, so things are still under development. However, on the other side, since I'm the one building and using it, I get to determine the features going in or coming out.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="mac-os-x"&gt;
&lt;h2&gt;Mac OS X&lt;/h2&gt;
&lt;p&gt;I started as an Apple user:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://www.flickr.com/photos/pydanny/6933443849/"&gt;&lt;img alt="http://farm8.staticflickr.com/7050/6933443849_51316a7cb7.jpg" class="align-center" id="apple" src="http://farm8.staticflickr.com/7050/6933443849_51316a7cb7.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;I use Mac OS X professionally and have done so since 2006. However, between autumn of 1985 and 2006 I used MS/DOS and Windows (deployments usually to Unix/Linux). Not by choice but by hard reality of management decision. In September of 2006 as I started to learn Python work gave me an old, discarded Macbook Pro. Since then coding on OS X and then deploying on Linux has been my pattern. I've followed this pattern ever since, and I'm going to hit six years now as an OS X user.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="tools"></category></entry><entry><title>PyCon Australia 2011 Review</title><link href="http://pydanny.com/pycon-australia-2011-review.html" rel="alternate"></link><updated>2012-02-24T12:45:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/pycon-australia-2011-review.html</id><summary type="html">&lt;p&gt;In June of 2011 I had the good fortune of having my then girlfriend, Audrey Roy, now fiancee, &lt;a class="reference external" href="http://pydanny.blogspot.com/2011/06/im-going-to-pycon-australia.html"&gt;invited to present a keynote speech at PyCon Australia 2011&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was terribly excited for her to get that invitation, and that excitement was compounded when they allowed me to present on &lt;a class="reference external" href="http://www.slideshare.net/pydanny/confessions-of-a-joe-developer`:"&gt;Confessions of Joe Developer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Travel is a passion of mine, and it's only been since 2007 that I've gotten a chance to do much seeing of the world. Australia was always this distant goal of mine, but I never thought I would get the chance to go. Fortunately, my assumption was wrong and we landed on August 18th in Sydney, Australia!&lt;/p&gt;
&lt;p&gt;Audrey &lt;a class="reference external" href="http://audreyr.posterous.com/thank-you-pycon-au"&gt;wrote her own statement about the event&lt;/a&gt; right after we were done. She's good that way. Okay then, off to my own review. This is belated, but better late then never, right?&lt;/p&gt;
&lt;div class="section" id="conference-rooms"&gt;
&lt;h2&gt;Conference Rooms&lt;/h2&gt;
&lt;p&gt;The Sydney Masonic Center was the venue and it was a really curious building. They built it a while ago, then apparently grafted an office building onto the top of the temple. &lt;strong&gt;You have to see it to believe it&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The main temple room was room, interesting, and fun. The acoustics, to my limited ear, seemed quite good. The alternative rooms for some of the tracks were small presentation rooms, which did quite nicely except when the organizers chose popular talks for small rooms and things overflowed. Everyone was good natured about that and we all just worked it out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result: Great&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="speakers"&gt;
&lt;h2&gt;Speakers&lt;/h2&gt;
&lt;p&gt;I'm partial but I think the opening keynote by Audrey Roy about diversity was wonderful. Mary Gardinar also talk about open source projects trying to change the world that need our support. Raymond Hettiger seriously delivered the goods with another version of his amazing talk about what makes Python great. Whatever you do, go and see it as many times as possible because he changes it each and every time.  Richard Jones' presentation on the &lt;a class="reference external" href="http://pydanny-event-notes.readthedocs.org/en/latest/PyconAU2011/zen_of_python.html"&gt;Zen of Python&lt;/a&gt; was very solid too, and I'll use this as an opportunity to promote my &lt;a class="reference external" href="http://pypi.python.org/pypi/that"&gt;Anti-Zen of Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When it came time for me to present on &lt;a class="reference external" href="http://www.slideshare.net/pydanny/confessions-of-a-joe-developer`:"&gt;Confessions of Joe Developer&lt;/a&gt;, I finished way too early; plus me and Audrey felt the talk was not technical enough. Even though the reception for my talk was very positive, based on that experience and observation we ramped up the technical content for DjangoCon US and I delivered a much stronger talk. I want to thank the Australian Python community for being a wonderful audience.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://pydanny-event-notes.readthedocs.org/en/latest/PyconAU2011/index.html"&gt;rest of the talks I saw were all quite good&lt;/a&gt;, in fact the &lt;a class="reference external" href="http://pydanny-event-notes.readthedocs.org/en/latest/PyconAU2011/decorators.html"&gt;one on decorators&lt;/a&gt; was incredible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result: Super&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conference-meals"&gt;
&lt;h2&gt;Conference Meals&lt;/h2&gt;
&lt;p&gt;The night before the conference, Frends/mentors Russell Keith-Magee and Malcolm Tredennick took me to a sushi-train place and we gobbled down some very nice raw seafood. Call me silly, but sushi on moving plates just tastes better! Thanks guys!&lt;/p&gt;
&lt;p&gt;In between talks they served nice little sandwiches. The coffee bar had lovely Flat Whites and considering the quality of dairy in Australia I was very happy with the break food.&lt;/p&gt;
&lt;p&gt;The first night of the conference they served an amazing, amazing meal. The lamb was like nothing I've tasted before - my best way of describing it was &amp;quot;&lt;em&gt;so this is how lamb is supposed to taste&lt;/em&gt;&amp;quot;. We also got served Pavlova, which Audrey really enjoyed.&lt;/p&gt;
&lt;p&gt;The last evening of the conference we went out to a famous Sydney gastropub/brewery and got kangaroo and crocodile pizza. The kangaroo was outstanding, but the alligator wasn't my thing.&lt;/p&gt;
&lt;p&gt;After the conference we went with Graham Dumpleton to a wonderful Dim Sum place and I stuffed myself silly while Audrey quizzed Graham on WSGI. I was sleepy for the rest of the day.&lt;/p&gt;
&lt;p&gt;Pounds gained? Many.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result: Superb&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="parties"&gt;
&lt;h2&gt;Parties&lt;/h2&gt;
&lt;p&gt;There were some lovely dinners and hang-outs. It was incredible putting faces to names and personalities. Everyone looked as I imagined, which meant they looked smashing. Events tended to be lower key, which can make for some wonderfully nice, cozy conversation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result: Good&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="accommodations"&gt;
&lt;h2&gt;Accommodations&lt;/h2&gt;
&lt;p&gt;There was no official conference hotel so we stayed at World Hotel - in easy walking distance of the conference center. It wasn't cheap, but I've learned from painful experience that when you travel to a conference, you want to spend your time at the conference, not going to-and-from a cheap hotel five miles away.&lt;/p&gt;
&lt;p&gt;The staff of the hotel were very nice and helpful. Unfortunately they were working around the limitations of their building. The rooms were really tiny and rather stuffy. Normally that isn't an issue since we spend a lot of our time outside the room, but in this case Audrey was polishing her talk and needed a quiet room.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result: Average but not the fault of the conference&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sprints"&gt;
&lt;h2&gt;Sprints&lt;/h2&gt;
&lt;p&gt;We talked with Richard Jones about PyPI authentication issues, and he decided to go with OpenID. Personally, I would prefer OAUTH but I'll take whatever I can get. On the behalf of the community Mark Rees implemented OpenID on PyPI at the sprint so things like &lt;a class="reference external" href="http://opencomparison.org"&gt;http://opencomparison.org&lt;/a&gt; can support the community better. One goal at PyCon 2012 is to get that working as another authentication system.&lt;/p&gt;
&lt;p&gt;Otherwise I closed bugs and worked lintification of the project. Audrey and a couple Australian PyLadies, Elena Williams and Jenny Nguyen, worked some core Django documentation tickets. We didn't get as much done as we hoped thanks to an outside distraction, but the organization of the sprints was top-notch.&lt;/p&gt;
&lt;p&gt;During the sprint, those crazy Australians taught us how to do a &lt;strong&gt;Tim Tam Slam&lt;/strong&gt;. It's rather scary and not for the faint of heart.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result: Great&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="overall-result"&gt;
&lt;h2&gt;Overall Result&lt;/h2&gt;
&lt;p&gt;The conference was run professionally. The leadership was on the ball. The few issues that cropped up were taken care of, certainly better then what I would have done. Thank you everyone who put it together or just gave us a great time: Tim Ansell, Richard Jones, Nick Coghlan, Russell Keith McGee, Graham Dumpleton, Malcolm Tredennick and many others.&lt;/p&gt;
&lt;p&gt;Australia was amazing. The people were wonderful. I wish we had more time to go sightseeing and relax, but we were off all too quickly. I could write a book about the experience.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Combined Result: Great&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="pycon"></category><category term="audrey"></category><category term="australia"></category><category term="review"></category></entry><entry><title>My PyCon 2012 Schedule</title><link href="http://pydanny.com/my-pycon-2012-schedule.html" rel="alternate"></link><updated>2012-02-22T09:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/my-pycon-2012-schedule.html</id><summary type="html">&lt;p&gt;Here I was thinking that this year's PyCon wasn't going to be so busy because I didn't submit a talk or tutorial. Ha! What the heck was I thinking?&lt;/p&gt;
&lt;p&gt;Here's what I've already got in the works.&lt;/p&gt;
&lt;div class="section" id="wednesday-march-7th"&gt;
&lt;h2&gt;Wednesday, March 7th&lt;/h2&gt;
&lt;p&gt;Me and Audrey are driving up from Los Angeles. I've wanted to do this drive for a while, so this is very exciting. We'll arrive in the evening and hopefully tag up with friends old and new.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thursday-march-8th"&gt;
&lt;h2&gt;Thursday, March 8th&lt;/h2&gt;
&lt;p&gt;I'm moderating the Code Reuse panel of the Python Web Summit. &lt;a class="reference external" href="http://www.google.com/moderator/#15/e=1c9a94&amp;amp;t=1c9a94.43"&gt;Have you submitted a question yet&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;In the evening we'll be helping assemble bags for the conference. That's always a blast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="friday-march-9th"&gt;
&lt;h2&gt;Friday, March 9th&lt;/h2&gt;
&lt;p&gt;PyCon really begins! I'll be at the keynotes, and then the talks begin. These are some of the talks I'm really leaning towards watching:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://us.pycon.org/2012/schedule/presentation/64/"&gt;Introduction to Metaclasses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://us.pycon.org/2012/schedule/presentation/399/"&gt;The Art of Subclassing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://us.pycon.org/2012/schedule/presentation/249/"&gt;Data, Design, Meaning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://us.pycon.org/2012/schedule/presentation/246/"&gt;Code Generation in Python: Dismantling Jinja&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem, of course, is that all the talks look awesome. Missing some of these talks is going to hurt.&lt;/p&gt;
&lt;p&gt;In the evening we're going to the New Relic/Loggly/Skull Candy party and hang out at the (in)famous TIP BOF.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="saturday-march-10th"&gt;
&lt;h2&gt;Saturday, March 10th&lt;/h2&gt;
&lt;p&gt;I'll be at the &lt;a class="reference external" href="http://consumernotebook.com"&gt;Consumer Notebook&lt;/a&gt; &lt;a class="reference external" href="http://pycon.blogspot.com/2012/02/startup-row-winners-for-pycon-2012.html"&gt;Startup Row&lt;/a&gt; booth all day! Come and hang out with us and all the other bright, new companies.&lt;/p&gt;
&lt;p&gt;In the evening I'm hosting the &lt;a class="reference external" href="https://us.pycon.org/2012/community/openspaces/capoeira/"&gt;PyCon Capoeira Open Space&lt;/a&gt;. We've got a seriously large room assigned for the event, and over twenty five people currently signed up to participate (&lt;a class="reference external" href="http://bit.ly/pycon-capoeira"&gt;there's still room for signups&lt;/a&gt;). Even if you don't want to play a musical instrument or learn/play at Capoeira, come anyway to watch. Some of the players there have some seriously amazing skills - I can assure you've seen them in the movies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sunday-march-11th"&gt;
&lt;h2&gt;Sunday, March 11th&lt;/h2&gt;
&lt;p&gt;More talks!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://us.pycon.org/2012/schedule/presentation/482/"&gt;Transifex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://us.pycon.org/2012/schedule/presentation/301/"&gt;Sketching a better product&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://us.pycon.org/2012/schedule/presentation/66/"&gt;Building A Python-Based Search Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://us.pycon.org/2012/schedule/presentation/168/"&gt;Diversity in practice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="monday-march-12-thursday-march-15"&gt;
&lt;h2&gt;Monday March 12 - Thursday, March 15&lt;/h2&gt;
&lt;p&gt;Sprints! Nothing set in stone yet, but some ideas I've had include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Launch python.opencomparison.org for all of Python.&lt;/li&gt;
&lt;li&gt;OpenComparison integration of PyPI OpenID, SourceForge OAUTH, and BitBucket OAUTH.&lt;/li&gt;
&lt;li&gt;Improved OpenComparison integration of the Launchpad API.&lt;/li&gt;
&lt;li&gt;Implement Gitorious API for OpenComparison.&lt;/li&gt;
&lt;li&gt;Implement Text Based search for OpenComparison.&lt;/li&gt;
&lt;li&gt;Hack on Mongo related technologies such as django-mongonaut and some other planned projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="text-align: center;"&gt;&lt;a href="https://us.pycon.org/2012/"&gt;&lt;img border="0" height="102" width="277" src="http://1.bp.blogspot.com/-fa4jnLXs1so/TniyemLkoiI/AAAAAAAAAqo/LjZqklTFBXk/s400/pycon2012.png"&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
</summary><category term="python"></category><category term="pycon"></category><category term="consumernotebook"></category><category term="django"></category></entry><entry><title>Selected for PyCon StartUp Row</title><link href="http://pydanny.com/selected-for-pycon-startup-row.html" rel="alternate"></link><updated>2012-02-21T01:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/selected-for-pycon-startup-row.html</id><summary type="html">&lt;p&gt;Me and Audrey have been working hard on &lt;a class="reference external" href="http://consumernotebook.com"&gt;Consumer Notebook&lt;/a&gt;, a Python/Django based project. We submitted it to PyCon StartUp row and found out this morning we've been accepted. &lt;strong&gt;Hooray!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From the &lt;a class="reference external" href="http://pycon.blogspot.com/2012/02/startup-row-winners-for-pycon-2012.html"&gt;PyCon StartUp Row winner's post&lt;/a&gt;, here is a little bit of what we're about:&lt;/p&gt;
&lt;blockquote class="highlights"&gt;
Have you tried researching products online recently? Search engines are gamed by scammy marketers. Product review sites overwhelm you with ads, have unreliable reviews, or dryly compare raw product specs. &lt;a class="reference external" href="http://consumernotebook.com"&gt;Consumer Notebook&lt;/a&gt; is working to solve this problem. It is like Yelp for products, with product comparison grids inspired by the founders' open-source work on &lt;a class="reference external" href="http://djangopackages.com"&gt;Django Packages&lt;/a&gt; and &lt;a class="reference external" href="http://opencomparison.org"&gt;Open Comparison&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;Just so you know, &lt;a class="reference external" href="http://us.pycon.org"&gt;PyCon&lt;/a&gt; in North America is the biggest gathering for the international Python community. The conference this year is in Santa Clara, California, and is sold-out at 1500+ attendees, but could have easily sold out several times that number. The talks, tutorials, and events are going to be incredible, and I'm delighted to be part of the PyCon experience!&lt;/p&gt;
&lt;p&gt;We look forward to sharing the StartUp Row with friends like Transifex, Python Packages, and &lt;a class="reference external" href="http://www.weddinglovely.com/"&gt;Wedding Lovely&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please check out &lt;a class="reference external" href="http://consumernotebook.com"&gt;Consumer Notebook&lt;/a&gt; right now and also visit our PyCon booth on Saturday, March 10th and we'll show you what we're doing.&lt;/p&gt;
</summary><category term="python"></category><category term="pycon"></category><category term="audrey"></category><category term="consumernotebook"></category><category term="django"></category></entry><entry><title>Parsing MongoDB URI</title><link href="http://pydanny.com/parsing-mongodb-uri.html" rel="alternate"></link><updated>2012-02-20T09:20:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/parsing-mongodb-uri.html</id><summary type="html">&lt;p&gt;Rather than hard-code the configuration into a Python based settings file, when using a PaaS such as Heroku you want to pick up the MongoDB URI from the system settings. Here's what I do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# get the dynamic elements from the MongoURI&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;^mongodb\:\/\/(?P&amp;lt;username&amp;gt;[_\w]+):(?P&amp;lt;password&amp;gt;[\w]+)@(?P&amp;lt;host&amp;gt;[\.\w]+):(?P&amp;lt;port&amp;gt;\d+)/(?P&amp;lt;database&amp;gt;[_\w]+)$&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mongolab_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;MONGOLAB_URI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mongolab_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupdict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# Save the data to settings&lt;/span&gt;
&lt;span class="n"&gt;MONGO_HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;MONGO_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;MONGO_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;MONGO_DATABASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;database&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;MONGO_PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Connect to MongoEngine&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mongoengine&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;me_connect&lt;/span&gt;
&lt;span class="n"&gt;me_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;database&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="python"></category><category term="mongodb"></category><category term="howto"></category></entry><entry><title>django-uni-form end of life</title><link href="http://pydanny.com/django-uni-form-end-of-life.html" rel="alternate"></link><updated>2012-02-18T01:00:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/django-uni-form-end-of-life.html</id><summary type="html">&lt;p&gt;I started on django-uni-form in January 2009. In order to use &lt;a class="reference external" href="http://pinaxproject.com"&gt;Pinax&lt;/a&gt; on an internal social network for &lt;a class="reference external" href="http://www.nasa.gov"&gt;NASA&lt;/a&gt; HQ, we had to render all content, including forms, &lt;a class="reference external" href="http://django-uni-form.readthedocs.org/en/latest/concepts.html#section-508"&gt;Section 508&lt;/a&gt; compliant. Rather than rewrite the html for all 50+ forms that existed in the  Pinax 0.5.x framework at that time, I decided to minimize my work and automate things. &lt;a class="reference external" href="http://jtauber.com"&gt;James Tauber&lt;/a&gt; gave guidance and insight, my co-workers were supportive, and &lt;a class="reference external" href="http://enn.io"&gt;Jannis Leidel&lt;/a&gt; suggested the Uni-form library. The name &lt;strong&gt;Django Uni-Form&lt;/strong&gt; was obvious, and lo the project was named.&lt;/p&gt;
&lt;p&gt;Looking at the old, extremely deprecated &lt;a class="reference external" href="http://code.google.com/p/django-uni-form/"&gt;Google Code site for django-uni-form&lt;/a&gt;, I see that the first commit happened on January 7th, 2009. That was for version 0.1, with some core code that was literally a merger between the Django form example on how to integrate divs into forms and the simplest template tag I could figure out.&lt;/p&gt;
&lt;p&gt;The python code in uni_form/templatetags/uni_form.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template.loader&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;


&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@register.filter&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;as_uni_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;templates/uni_form.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The template tag code was nearly exactly copy/pasted from the starter &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.0/topics/forms/#looping-over-the-form-s-fields"&gt;Django docs on forms&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;field&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;form&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;div class=&amp;quot;ctrlHolder &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;field.errors&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;error&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;field.errors&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;p class=&amp;quot;errorField&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;lt;strong&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;field.label_tag&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;field&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;field.help_text&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;p class=&amp;quot;formHint&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;field.help_text&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using it was trivial, you just wrote out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;uni_form&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;as_uni_form&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="days-of-django-uni-form"&gt;
&lt;h2&gt;Days of django-uni-form&lt;/h2&gt;
&lt;p&gt;Leading up to &lt;cite&gt;PyCon&lt;/cite&gt; 2009 James Tauber suggested some things that lead to the &lt;a class="reference external" href="http://django-uni-form.readthedocs.org/en/latest/concepts.html#form-helpers"&gt;FormHelpers&lt;/a&gt;, and we hammered out the API on IRC. We knew it crossed the rigid lines between Model-View-Template, but sometimes it's advantageous to break a few rules and abstractions in order to get better things down the road&lt;/p&gt;
&lt;p&gt;At PyCon 2009 with the mentoring of Jannis, James, and &lt;a class="reference external" href="http://twitter.com/brosner"&gt;Brian Rosner&lt;/a&gt;, I moved the project from google code to &lt;a class="reference external" href="https://github.com/pydanny/django-uni-form"&gt;Github&lt;/a&gt;. Jannis released it on &lt;a class="reference external" href="http://pypi.python.org/pypi/"&gt;PyPI&lt;/a&gt; and I followed the pattern he showed me for two years. Yeah, I learned tons under those guys.&lt;/p&gt;
&lt;p&gt;After PyCon 2009 a pull request with the &lt;a class="reference external" href="http://django-uni-form.readthedocs.org/en/latest/helpers.html#layouts"&gt;Layout&lt;/a&gt; helper was provided. It took some work to make it pass all the tests and use cases, but the end result was definition of form layout in the Python. This broke the rigid battle lines of Model-View-Template and left purists screaming in agony, but it certainly made working with forms in Django trivially easy.&lt;/p&gt;
&lt;p&gt;Lots of people started to use the project across projects like Pinax and organizations like NASA, &lt;a class="reference external" href="http://pbs.org"&gt;PBS&lt;/a&gt;, Discovery Channel, various newspapers and many others. Lots of pull requests came in and the features grew.&lt;/p&gt;
&lt;p&gt;In 2010, &lt;a class="reference external" href="http://twitter.com/arowla"&gt;Alice Rowland&lt;/a&gt; submitted the first &lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt; docs, and it was her work that really helped get me started on doing lots of Sphinx work.&lt;/p&gt;
&lt;p&gt;And, all the way into 2011, pull requests for Django Form Sets started to come rolling in, and almost none were of acceptable quality. They never came with documentation, tests, and almost always broke existing tests really hard. Since I'm not a huge fan of Django FormSets, I didn't want to put in a ton of effort making them work. I believe one of them was pretty good, but life was crazy busy at the time and I let it slide. Apologies to whoever it was gave me a working FormSet pull request with documentation, tests, and working code.&lt;/p&gt;
&lt;p&gt;Long periods were going by without new versions. I admit I often slow about accepting pull requests. Life was busy and reviewing the incoming code took a lot of time. Browser cross-checking, running tests, and more was really time consuming. I tried to get others to become co-leads on the project, but invariably they didn't have time to do it. Note: If someone asks you to co-lead something, respond in 24 hours.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enter-miguel-araujo"&gt;
&lt;h2&gt;Enter Miguel Araujo&lt;/h2&gt;
&lt;p&gt;After PyCon 2011, when there was some unpleasant stress in my life, I woke up cranky one morning and mouthed off on twitter to this guy who asked me to accept a pull request on django-uni-form. This guy tweeted back to me saying I ought to be nicer since I had a library people liked.&lt;/p&gt;
&lt;p&gt;He was right.&lt;/p&gt;
&lt;p&gt;I apologized to the guy (&lt;a class="reference external" href="http://twitter.com/maraujop"&gt;Miguel Araujo&lt;/a&gt;) and remembered my manners. Over the next couple of months we chatted via Twitter and Github's messaging system. He was smart, trustworthy, and passionate about everything he did. I knew I had found my co-lead. He responded promptly and I gave him commit rights.&lt;/p&gt;
&lt;p&gt;Working together (with him doing the vast majority of the work), we moved the project into new releases. The architecture and design changed, driven by discussions we had together. The code was cleaned up, gnarly bits in there to support old versions of Python and Django kicked out, and the documentation revised. The project had new life!&lt;/p&gt;
&lt;p&gt;The only blip I saw with Miguel is my own fault of sometimes being too nice as a project leader when it comes to accepting pull requests. &lt;a class="reference external" href="http://django-uni-form.readthedocs.org/en/latest/contributing.html#how-to-get-your-pull-request-accepted"&gt;I believe pull requests should be really atomic&lt;/a&gt; - for one thing and one thing only with support tests and documentation. Otherwise it becomes nigh impossible to incorporate them and these days I reject multi-purpose pull requests.  One pull request in particular took a huge amount of debate and discussion to work in. I think after that Miguel is much better at being upfront at the beginning about rejecting pull requests with giant scopes.&lt;/p&gt;
&lt;p&gt;During all this I asked Miguel to take over the project, he accepted, and &lt;a class="reference external" href="http://pydanny.blogspot.com/2011/06/announcing-django-uni-form-080-beta.html"&gt;I even blogged my announcement his role as project leader&lt;/a&gt;. Miguel is indeed very nice and after that fact he asked me to remain on board as co-lead.&lt;/p&gt;
&lt;p&gt;We finally met in September of 2011 and co-presented on &lt;a class="reference external" href="http://www.slideshare.net/pydanny/advanced-django-forms-usage"&gt;Advanced Django Form Usage at DjangoCon 2011&lt;/a&gt;. The deepest technical material we presented was authored by Miguel. During our research he uncovered at least one bug in Django and got an ancient bug closed. It was a great experience and I hope he'll co-present with me in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-uni-form-is-dead-long-live-django-crispy-forms"&gt;
&lt;h2&gt;django-uni-form is dead, long live django-crispy-forms&lt;/h2&gt;
&lt;p&gt;The upside of django-uni-form is that it grew in features organically thanks to my own needs and general community effort. The downside of django-uni-form is that it grew in features organically thanks to my own needs and general community effort. In any long running project there is cruft and weird patterns that start to hurt after a while. django-uni-form was no different.&lt;/p&gt;
&lt;p&gt;So I'm making this absolutely official as of now. &lt;strong&gt;django-uni-form is at it's end of life&lt;/strong&gt;. It's done and kaput. No more pull requests will be accepted and the issue tracker will be turned off shortly. Just so no one is mistaken:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;django-uni-form is deprecated. Use django-crispy-forms&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Miguel asked if he could start the project anew, under a different name. We both had been uncomfortable with the name &lt;em&gt;django-uni-form&lt;/em&gt; for some time, especially since it had almost nothing to do with Uni-form anymore. In fact, I often using template overrides to avoid the Uni-form HTML layout - the most common alternative being &lt;a class="reference external" href="http://twitter.github.com/bootstrap/"&gt;Twitter Bootstrap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We tossed around names for the project, but all of them were stupid, especially mine. We are both huge fans and users of &lt;a class="reference external" href="https://github.com/brutasse/django-floppyforms"&gt;django-floppyforms&lt;/a&gt; (HTML5 form widget app), so my fiancee, &lt;a class="reference external" href="http://audreymroy.com"&gt;Audrey Roy&lt;/a&gt;, suggested django-crispy-forms. And lo, the project was named.&lt;/p&gt;
&lt;p&gt;Right now &lt;a class="reference external" href="https://github.com/maraujop/django-crispy-forms"&gt;django-crispy-forms&lt;/a&gt; has an improved API, better performance, and supports both Twitter bootstrap forms 2.0 and UniForm. Adding new form layouts will be easier, and feature controls will be better.&lt;/p&gt;
&lt;p&gt;What you should be using now is &lt;a class="reference external" href="https://github.com/maraujop/django-crispy-forms"&gt;django-crispy-forms&lt;/a&gt;. Don't worry about changing over as there are &lt;a class="reference external" href="http://django-crispy-forms.readthedocs.org/en/d-0/migration.html"&gt;migration instructions&lt;/a&gt; on the &lt;a class="reference external" href="http://django-crispy-forms.readthedocs.org/"&gt;excellent documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Try it. You'll like it. :-)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="python"></category></entry><entry><title>Two years ago today</title><link href="http://pydanny.com/two-years-ago-today.html" rel="alternate"></link><updated>2012-02-17T09:20:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/two-years-ago-today.html</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="http://us.pycon.org"&gt;PyCon&lt;/a&gt; tutorial on Django in Depth was ending. I had been sitting next to my friend &lt;a class="reference external" href="http://djangrrl.com/"&gt;Barbara&lt;/a&gt; and we got up to go when I heard a feminine voice ask: &amp;quot;Are you &lt;a class="reference external" href="https://twitter.com/bshaurette"&gt;bshaurette&lt;/a&gt;?&amp;quot; I turned and it was like I got punched in the gut.&lt;/p&gt;
&lt;p&gt;It was the first time I met &lt;a class="reference external" href="http://audreymroy.com"&gt;Audrey&lt;/a&gt;. I remember every detail of how she looked at that moment. The clothes she was wearing, the part in her hair, that her eyes met mine, and that they didn't turn away. I was immediately captivating, but fortunately remembered to act like a gentleman. I tossed in a casual invitation to her to join us for lunch, which I pulled off even though my heart was pounding. Thankfully she accepted.&lt;/p&gt;
&lt;p&gt;Life has been pretty much awesome ever since.&lt;/p&gt;
&lt;p&gt;That was the day I met the love of my life.&lt;/p&gt;
</summary><category term="pycon"></category><category term="audrey"></category></entry><entry><title>My new blog</title><link href="http://pydanny.com/my-new-blog.html" rel="alternate"></link><updated>2012-02-17T00:30:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/my-new-blog.html</id><summary type="html">&lt;p&gt;What I did to get it running:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install pelican
git clone git://github.com/pydanny/pydanny.github.com.git
&lt;/pre&gt;
&lt;p&gt;My settings.py file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
AUTHOR = 'Daniel Greenfeld'
DISQUS_SITENAME = 'pydanny'
GITHUB_URL = 'https://github.com/pydanny'
GOOGLE_ANALYTICS='UA-18066389-2'
SITEURL = 'http://pydanny.github.com'
SITENAME = 'pydanny'
SOCIAL = (('twitter', 'http://twitter.com/pydanny'),
          ('github', 'https://github.com/pydanny'),
          ('facebook', 'http://www.facebook.com/daniel.greenfeld'),)
TAG_FEED = 'feeds/%s.atom.xml'
THEME='notmyidea'
TWITTER_USERNAME = 'pydanny'
&lt;/pre&gt;
&lt;p&gt;How I push up entries and pages and themes:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pelican . -o . -s settings.py
git commit -am &amp;quot;blogging here&amp;quot;
git push
&lt;/pre&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results!&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pydanny.github.com"&gt;http://pydanny.github.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="blog"></category></entry><entry><title>Tried out Jekyll</title><link href="http://pydanny.com/tried-out-jekyll.html" rel="alternate"></link><updated>2012-02-09T10:20:00Z</updated><author><name>Daniel-Greenfeld</name></author><id>http://pydanny.com/tried-out-jekyll.html</id><summary type="html">&lt;div class="section" id="why-jekyll"&gt;
&lt;h2&gt;Why Jekyll?&lt;/h2&gt;
&lt;p&gt;I've had issues with Blogger for some time.  After my fiancee, Audrey Roy, moved her blog to &lt;a class="reference external" href="https://github.com/mojombo/jekyll"&gt;https://github.com/mojombo/jekyll&lt;/a&gt;, I was impressed enough to give it a try.&lt;/p&gt;
&lt;p&gt;Why did it impress me?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code-highlighting-made-easy"&gt;
&lt;h2&gt;Code highlighting made easy&lt;/h2&gt;
&lt;p&gt;I don't have to hand-craft HTML code to get google prettify in a post. I just stick in a simple macro of 'highlight python' called like a Django templatetag and I get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Daniel Greenfeld&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This issue alone sums up why I don't do more blog posts with code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-don-t-want-to-maintain-my-own-blog-site"&gt;
&lt;h2&gt;I don't want to maintain my own blog site&lt;/h2&gt;
&lt;p&gt;A couple times I rolled out a blog on a site I stood up, but didn't really feel like maintaining a site. I want someone else to do it. When I write, I want someone else to worry about the details. I want to focus on writing and nothing else.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-want-to-be-able-to-write-without-connection"&gt;
&lt;h2&gt;I want to be able to write without connection&lt;/h2&gt;
&lt;p&gt;I need an internet connection to get my blogger posts to format right. With Jekyll, I can just type away.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ability-to-publish-via-git"&gt;
&lt;h2&gt;Ability to publish via git&lt;/h2&gt;
&lt;p&gt;My &lt;a class="reference external" href="http://pydanny-event-notes.rtfd.org"&gt;http://pydanny-event-notes.rtfd.org&lt;/a&gt; has really exploded in my own usage and continued because it uses the same patterns I use in software development. I'm used to the pattern of using Git to push up content, so why use naked HTML? Sure, there are RST-to-HTML processors that I could use to generate that HTML, but they always require an some amount of manual correction. Jekyll, and it's alternatives,let me just write.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-not-jekyll"&gt;
&lt;h2&gt;Why not Jekyll?&lt;/h2&gt;
&lt;p&gt;Jekyll is written in &lt;a class="reference external" href="http://ruby-lang.org"&gt;ruby&lt;/a&gt;. Nothing against ruby, but I can't trivially work in that language the way I can in Python. It's good to eat your own dogfood.&lt;/p&gt;
&lt;p&gt;So I started looking at &lt;a class="reference external" href="http://hyde.github.com/"&gt;hyde&lt;/a&gt;, &lt;a class="reference external" href="http://blogofile.com/"&gt;blogofile&lt;/a&gt;, and &lt;a class="reference external" href="http://pelican.readthedocs.org/"&gt;pelican&lt;/a&gt; as alternatives. More on that later.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="ruby"></category><category term="blog"></category></entry></feed>